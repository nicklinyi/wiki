{"pages":[{"title":"Categories","date":"2018-05-01T06:50:34.410Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2018-05-01T02:22:52.193Z","path":"tags/index.html","text":""}],"posts":[{"title":"Cauchy-Schwarz不等式的证明","date":"2018-05-01T16:00:00.000Z","path":"Cauchy_Schwarz/","text":"Cauchy-Schwarz不等式的表述为：存在非零向量$\\vec x , \\vec y \\in \\mathbb{R}^n$使得 $|\\vec x \\cdot \\vec y| \\leq \\| \\vec x\\| \\| \\vec y\\| $，当且仅当$\\vec x = c \\vec y $ 时等号成立。 证明如下： 首先构造一个关于$t$的函数 $$ p(t)=\\|t\\vec y-\\vec x\\|^2 \\geq 0 .$$根据公式 $\\|\\vec v\\|^2 = \\vec v\\cdot \\vec v$, 上式可改写为$$ p(t)=(t\\vec y-\\vec x)\\cdot (t\\vec y-\\vec x) .$$将其展开，有：$$ p(t)=t\\vec y\\cdot t\\vec y- \\vec x\\cdot t\\vec y -t\\vec y\\cdot\\vec x +\\vec x\\cdot \\vec x .$$接着，有$$ p(t)=(\\vec y \\cdot \\vec y)t^2 - 2(\\vec x \\cdot \\vec y)t +\\vec x\\cdot \\vec x \\geq 0 .$$假设$a=(\\vec y \\cdot \\vec y), b=2(\\vec x \\cdot \\vec y), c=\\vec x\\cdot \\vec x, $ 那么 $p(t)=at^2-bt+c $ 对于任意的$t$都大于等于0.因此有，$$p(\\frac{b}{2a})=a(\\frac{b}{2a})^2-b\\frac{b}{2a}+c \\geq 0. $$化简得，$$4ac \\geq b^2.$$代入原来的$x$,$y$, 有：$$4 (\\|\\vec y\\|^2 \\|\\vec x\\|^2) \\geq (2(\\vec x\\cdot \\vec y))^2.$$即$$\\|\\vec y\\|^2 \\|\\vec x\\|^2 \\geq (\\vec x\\cdot \\vec y)^2 .$$对两边同时开方，有$$\\|\\vec y\\| \\|\\vec x\\| \\geq |\\vec x\\cdot \\vec y| .$$ 当$\\vec x=c\\vec y$, 有$$|\\vec x\\cdot\\vec y|=|c\\vec y\\cdot\\vec y|=|c||\\vec y\\cdot\\vec y|=|c| \\|\\vec y\\|^2$$$$=|c|\\|\\vec y\\| \\|\\vec y\\| =\\|c\\vec y\\| \\| \\vec y\\| = \\|\\vec x\\| \\| \\vec y\\|. $$ Reference:https://www.khanacademy.org/math/linear-algebra/vectors-and-spaces/dot-cross-products/v/proof-of-the-cauchy-schwarz-inequality","tags":[{"name":"Cauchy-Schwarz","slug":"Cauchy-Schwarz","permalink":"https://nicklinyi.github.io/wiki/tags/Cauchy-Schwarz/"}],"categories":[{"name":"线性代数","slug":"线性代数","permalink":"https://nicklinyi.github.io/wiki/categories/线性代数/"}]},{"title":"Atom快捷键","date":"2018-03-15T16:00:00.000Z","path":"atom/","text":"文件切换ctrl-shift-s 保存所有打开的文件cmd-shift-o 打开目录cmd-\\ 显示或隐藏目录树ctrl-0 焦点移到目录树目录树下，使用a，m，delete来增加，修改和删除cmd-t或cmd-p 查找文件cmd-b 在打开的文件之间切换cmd-shift-b 只搜索从上次git commit后修改或者新增的文件 导航（等价于上下左右）ctrl-p 前一行ctrl-n 后一行ctrl-f 前一个字符ctrl-b 后一个字符 alt-B, alt-left 移动到单词开始alt-F, alt-right 移动到单词末尾 cmd-right, ctrl-E 移动到一行结束cmd-left, ctrl-A 移动到一行开始 cmd-up 移动到文件开始cmd-down 移动到文件结束 ctrl-g 移动到指定行 row:column 处 cmd-r 在方法之间跳转 目录树操作cmd-\\ 或者 cmd-k cmd-b 显示(隐藏)目录树ctrl-0 焦点切换到目录树(再按一次或者Esc退出目录树)a 添加文件d 将当前文件另存为(duplicate)i 显示(隐藏)版本控制忽略的文件alt-right 和 alt-left 展开(隐藏)所有目录ctrl-al-] 和 ctrl-al-[ 同上ctrl-[ 和 ctrl-] 展开(隐藏)当前目录ctrl-f 和 ctrl-b 同上cmd-k h 或者 cmd-k left 在左半视图中打开文件cmd-k j 或者 cmd-k down 在下半视图中打开文件cmd-k k 或者 cmd-k up 在上半视图中打开文件cmd-k l 或者 cmd-k right 在右半视图中打开文件ctrl-shift-C 复制当前文件绝对路径 书签cmd-F2 在本行增加书签F2 跳到当前文件的下一条书签shift-F2 跳到当前文件的上一条书签ctrl-F2 列出当前工程所有书签 选取 大部分和导航一致，只不过加上shift ctrl-shift-P 选取至上一行ctrl-shift-N 选取至下一样ctrl-shift-B 选取至前一个字符ctrl-shift-F 选取至后一个字符alt-shift-B, alt-shift-left 选取至字符开始alt-shift-F, alt-shift-right 选取至字符结束ctrl-shift-E, cmd-shift-right 选取至本行结束ctrl-shift-A, cmd-shift-left 选取至本行开始cmd-shift-up 选取至文件开始cmd-shift-down 选取至文件结尾cmd-A 全选cmd-L 选取一行，继续按回选取下一行ctrl-shift-W 选取当前单词 编辑和删除文本基本操作ctrl-T 使光标前后字符交换cmd-J 将下一行与当前行合并ctrl-cmd-up, ctrl-cmd-down 使当前行向上或者向下移动cmd-shift-D 复制当前行到下一行cmd-K, cmd-U 使当前字符大写cmd-K, cmd-L 使当前字符小写cmd-shift-P 搜索命令 删除和剪切ctrl-shift-K 删除当前行cmd-backspace 删除到当前行开始cmd-fn-backspace 删除到当前行结束ctrl-K 剪切到当前行结束alt-backspace 或 alt-H 删除到当前单词开始alt-delete 或 alt-D 删除到当前单词结束 多光标和多处选取cmd-click 增加新光标cmd-shift-L 将多行选取改为多行光标ctrl-shift-up, ctrl-shift-down 增加上（下）一行光标cmd-D 选取文档中和当前单词相同的下一处ctrl-cmd-G 选取文档中所有和当前光标单词相同的位置 括号跳转ctrl-m 相应括号之间，html tag之间等跳转ctrl-cmd-m 括号(tag)之间文本选取alt-cmd-. 关闭当前XML/HTML tag 编码方式ctrl-shift-U 调出切换编码选项 查找和替换cmd-F 在buffer中查找cmd-shift-f 在整个工程中查找 代码片段alt-shift-S 查看当前可用代码片段 在~/.atom目录下snippets.cson文件中存放了你定制的snippets 定制说明 自动补全ctrl-space 提示补全信息 折叠alt-cmd-[ 折叠alt-cmd-] 展开alt-cmd-shift-{ 折叠全部alt-cmd-shift-} 展开全部cmd-k cmd-N 指定折叠层级 N为层级数 文件语法高亮ctrl-shift-L 选择文本类型 使用Atom进行写作ctrl-shift-M Markdown预览可用代码片段 b, legal, img, l, i, code, t, table git操作cmd-alt-Z checkout HEAD 版本cmd-shift-B 弹出untracked 和 modified文件列表alt-g down alt-g up 在修改处跳转alt-G D 弹出diff列表alt-G O 在github上打开文件alt-G G 在github上打开项目地址alt-G B 在github上打开文件blamealt-G H 在github上打开文件historyalt-G I 在github上打开issuesalt-G R 在github打开分支比较alt-G C 拷贝当前文件在gihub上的网址 推荐一些好用的插件 主题atom-material-ui 好看到爆atom-material-syntax 美化atom-beautify 一键代码美化file-icons 给文件加上好看的图标atom-minimap 方便美观的缩略滚动图pretty-json json格式化工具activate-power-mode 炫酷的打字特效 gitatomatigit 可视化git操作git-time-machine git版本对比工具，可视化选择每一个commitmerge-conflicts 合并冲突可视化工具 代码提示emmet 这个不用介绍了吧atom-ternjs js代码提示很强大，高度定制化docblockr jsdoc 给js添加注释autoclose-html 闭合html标签color-picker 取色器 必备插件pigments 颜色显示插件 必装terminal-panel 直接在atom里面写命令了svg-preview svg预览 便捷操作advanced-open-file 快速打开、切换文件project-folder 快速打开、切换项目script 立即执行当前js文件 高亮language-vue vue框架代码高亮 终端platformio-atom-ide-terminal 终端插件，支持显示、隐藏及多窗口 就这些了，欢迎pull更多好用的插件！","tags":[{"name":"atom","slug":"atom","permalink":"https://nicklinyi.github.io/wiki/tags/atom/"}],"categories":[{"name":"工具","slug":"工具","permalink":"https://nicklinyi.github.io/wiki/categories/工具/"}]},{"title":"git","date":"2015-05-11T16:00:00.000Z","path":"git/","text":"1$ git log #查看commit的历史记录,方便的回退到任意版本 12345$ git reset --hard 322455 # commit id# 这条语句非常有用，比如在一个正确的程序上修改，结果运行发现运行结果# 出错，这时候通过git log 查看上一次commit的id，然后采用这条命令就可以将整个# 项目下的源文件重新退回到上一次的正确结果上。而因为修改地结果也可以通过git# reflog来查询出来，如果想重新回到之前修改的结果上的话 删除文件1$ git rm 1.txt branch123$ git branch -v #查看分支$ git branch -a #查看全部分支（包括远程分支）$ git check -b new # 创建new分支，并切换至该分支 12345$ git reflog #查看历史命令，用于查询回退版本后，找不到未来版本的commit idea34578 HEAD@&#123;0&#125;: reset: moving to HEAD^3628164 HEAD@&#123;1&#125;: commit: append GPLea34578 HEAD@&#123;2&#125;: commit: add distributedcb926e7 HEAD@&#123;3&#125;: commit (initial): wrote a readme file 12345$ git branch new-branch-name # 创建新的名为 new-branch-name 的分支# 这条语句的意义有：# 1. 用于发行一个release版本，创建一个release版本的分支，用于发行。# 2. 用于develop，一个master上用于存放正确的代码，develop用于进行测试，测试# 完后将正确的结果推回至master 1$ git checkout new-branch-name # 切换至名为 new-branch-name 的分支 1234$ git branch -a # 查看本地分支和远程分支$ git branch -d branchName # 删除本地分支branchName，前提条件是该分支已merge到其他分支$ git branch -D branchName # 强制删除本地分支branchName$ git push origin --delete branchName # 删除远程分支 origin/branchName submodule123$ git submodule add git:@github.com/xyz/xyz.git xyz-local$ git submodule init$ git submodule update tag123$ git tag -a v0.1 -m &quot;version 0.1&quot; # 创建 annotation tag$ git push origin --tags # 向远程分支推送 tag$ git tag ## 查看tag 生成秘钥 From the terminal, enter ssh-keygen at the command line.The command prompts you for a file to save the key in: 123 $ ssh-keygen Generating public/private rsa key pair.Enter file in which to save the key (/Users/emmap1/.ssh/id_rsa): Press the Enter or Return key to accept the default location. To create a key with a name or path other than the default, specify the full path to the key. For example, to create a key called my-new-ssh-key, enter a path like the one shown at the prompt:123$ ssh-keygen Generating public/private rsa key pair.Enter file in which to save the key (/Users/emmap1/.ssh/id_rsa): /Users/emmap1/.ssh/my-new-ssh-key Enter and re-enter a passphrase when prompted.The command creates your default identity with its public and private keys. The whole interaction will look similar to the following: 12345678910111213141516171819202122$ ssh-keygen Generating public/private rsa key pair.Enter file in which to save the key (/Users/emmap1/.ssh/id_rsa):Created directory &apos;/Users/emmap1/.ssh&apos;.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /Users/emmap1/.ssh/id_rsa.Your public key has been saved in /Users/emmap1/.ssh/id_rsa.pub.The key fingerprint is:4c:80:61:2c:00:3f:9d:dc:08:41:2e:c0:cf:b9:17:69[emmap1@myhost.local](mailto:emmap1@myhost.local) The key&apos;s randomart image is:+--[ RSA 2048]----+|*o+ooo. ||.+.=o+ . ||. *.* o . || . = E o || o . S || . . || . || || |+-----------------+ List the contents of ~/.ssh to view the key files. 1$ ls ~/.ssh id_rsa id_rsa.pub The command displays two files, one for the public key (for example id_rsa.pub) and one for the private key (for example,id_rsa). 采用免密码提交的方式需要将.git/config文件中url设为ssh的模式。1url = git@github.com:nick/projet-name.git Referencehttps://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#platform-linux Git Pro","tags":[{"name":"版本控制","slug":"版本控制","permalink":"https://nicklinyi.github.io/wiki/tags/版本控制/"},{"name":"git","slug":"git","permalink":"https://nicklinyi.github.io/wiki/tags/git/"}],"categories":[{"name":"工具","slug":"工具","permalink":"https://nicklinyi.github.io/wiki/categories/工具/"}]}]}