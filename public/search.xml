<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Parallel Studio XE</title>
      <link href="/awesome-installation/posts/intel.html"/>
      <content type="html"><![CDATA[<p>本文源于<a href="http://seisman.info/intel-non-commercial-software.html" target="_blank" rel="noopener">SeisMan</a>,介绍如何在 Linux 下安装 Parallel Studio XE 2018。</p><p>Intel 的软件开发工具包括：C/C++ 编译器、Fortran 编译器、MKL 数学库、MPI 并行库等。</p><p>这一套开发工具价格很贵，但是 Intel 为科研工作者、学生、教育者以及开源贡献者提供了免费的版本。</p><p><a href="https://software.intel.com/en-us/qualify-for-free-software" target="_blank" rel="noopener">主页</a><br><a href="https://software.intel.com/en-us/qualify-for-free-software/student" target="_blank" rel="noopener">学生申请</a></p><p>对于学生，intel 提供了全套开发工具一年的使用权。Linux 和 Windows 用户可以申请 Intel Parallel Studio XE<br>的 Cluster 版本（包含全部工具）；对于 OS X 用户，则只能申请 Composer 版本（只包含 C 编译器、Fortran 编译器以及 MKL 数学库）。</p><p>对于 Linux 用户，进入学生申请页，点击 “Linux” 即可申请。申请时需要填写 edu 邮箱，再填写其他一些必要的信息即可。</p><p>若学校的 edu 邮箱不在 Intel 的邮箱列表中，则无法申请，可以发邮箱给 Intel，申请把学校的邮箱加入到邮箱列表中。<br>申请完成后，Intel 会向注册邮箱内发送 license 以及下载链接。License 有效期一年，一年后需要重新申请。</p><h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><h3 id="CentOS-RHEL"><a href="#CentOS-RHEL" class="headerlink" title="CentOS/RHEL"></a>CentOS/RHEL</h3><p>安装之前需要先安装如下包:</p><pre><code>$ yum install gcc gcc-c++ gcc-gfortran pangox-compat-devel libunwind-devel</code></pre><p>除此之外，64 位系统还需要安装一些 32 位的库文件:</p><pre><code>$ yum install glibc.i686 libgcc.i686 libstdc++.i686</code></pre><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h3><pre><code>$ sudo apt install rpm</code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvf parallel_studio_xe_2018.tgz</span><br><span class="line">$ <span class="built_in">cd</span> parallel_studio_xe_2018</span><br><span class="line">$ sudo ./install_GUI.sh   <span class="comment"># 图形化界面，也可以直接执行`sudo ./install.sh`</span></span><br></pre></td></tr></table></figure><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li><p>检测依赖性</p><p>检测依赖的过程中，会有 “Unsupported OS” 的错误，除非系统非常老，否则该错误都可以忽略。<br>如果出现其他错误，需要 “detailed info about issues” 逐一排查。</p></li><li><p>License</p></li><li><p>激活</p><p>点击 “Use serial number to active and install product”，并到邮箱中找到序列号。<br>序列号的格式为 <code>XXXX-XXXXXXXX</code> 。</p></li><li><p>安装选项</p><p>可以直接使用默认值，也可以自定义指定安装路径以及要安装哪些组件。</p></li></ol><h2 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h2><p>对于 bash 用户，在 <code>~/.bashrc</code> 中加入如下语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Intel</span></span><br><span class="line"><span class="built_in">source</span> /opt/intel/vtune_amplifier_2018/amplxe-vars.sh quiet</span><br><span class="line"><span class="built_in">source</span> /opt/intel/inspector_2018/inspxe-vars.sh quiet</span><br><span class="line"><span class="built_in">source</span> /opt/intel/advisor_2018/advixe-vars.sh quiet</span><br><span class="line"><span class="built_in">source</span> /opt/intel/bin/compilervars.sh intel64</span><br></pre></td></tr></table></figure><p>然后执行 <code>source .bashrc</code> 使环境变量生效。对于 csh 用户，类似。</p><h2 id="修订历史"><a href="#修订历史" class="headerlink" title="修订历史"></a>修订历史</h2><ul><li>2013-09-10：初稿 for CentOS 6.5；</li><li>2014-07-15：加入了依赖包 for CentOS 7.0；</li><li>2015-04-08：Intel 非商业软件在停止一段时间后重新接受申请；</li><li>2015-07-17：学生可申请完整版开发工具（含 Fortran）；</li><li>2017-08-24：更新至 parallel_studio_xe_2017；</li><li>2017-10-26：更新至 parallel_studio_xe_2018；</li></ul>]]></content>
      
      <categories>
          
          <category> 高性能计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> Intel </tag>
            
            <tag> C </tag>
            
            <tag> Fortran </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用软件</title>
      <link href="/awesome-installation/posts/daily.html"/>
      <content type="html"><![CDATA[<a id="more"></a><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><pre><code>$ wget https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb # 下载 32bit$ wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb # 下载 64bit$ sudo dpkg -i google-chrome-stable_current_amd64.deb</code></pre><p>安装过程中如遇到错误提示,直接执行以下命令来安装 Chrome 浏览器需要的类库</p><pre><code>$ sudo apt-get -f install</code></pre><h2 id="Mendeley"><a href="#Mendeley" class="headerlink" title="Mendeley"></a>Mendeley</h2><p>Mendeley 是一个跨平台的文献管理软件,其内部自带了一个可以添加注释的 PDF 阅读器。下载链接:<a href="https://www.mendeley.com/download-mendeley-desktop" target="_blank" rel="noopener">https://www.mendeley.com/download-mendeley-desktop</a><br>    安装:</p><pre><code>$ sudo apt-get install libqtwebkit-dev # 安装依赖包$ sudo dpkg -i mendeleydesktop_1.15.1-stable_amd64.deb$ cd /opt/mendeleydesktop/bin$ ./install-mendeley-link-handler.sh /opt/mendeleydesktop/bin/mendeleydesktop</code></pre><h2 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h2><p>Linux 下有两大输入法框架:ibus 和 fcitx,其中 fcitx 的体验要比 ibus 好,因此选择<br>fcitx 框架,并安装搜狗输入法。</p><pre><code>$ sudo apt-get install fcitx</code></pre><p>与此同时,我们可以上搜狗官网下载搜狗输入法 linux 版:<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="noopener">http://pinyin.sogou.com/linux/</a><br>下载完搜狗输入法的安装包后,我们切换至下载此安装包的目录,进行安装</p><pre><code>$ sudo dpkg -i sogoupinyin_2.1.0.0068_amd64.deb</code></pre><p>安装完后,需要 logout 再 login，然后在终端中输入</p><pre><code>$ fcitx-config-gtk3</code></pre><p>在 <code>Input Method</code> 栏中,点击 <code>+</code>, 然后选择搜狗输入法(Sogou Pinyin)。设置好后,采<br>用快捷键 <code>Ctrl+Space</code> 即可调出搜狗输入法。</p><h2 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h2><ol><li>上Oracle官网下载JDK1.8</li><li><p>把JDK安装到<code>/usr/lib/jvm</code>这个路径下。如果系统没有该路径则创建该路径。<br>把下载好的压缩包文件解压到<code>/usr/lib/jvm</code>这个路径下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar zxvf jdk-8u111-linux-x64.tar.gz -C /usr/lib/jvm</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量，在用户根目录下的<code>.bashrc</code>文件中追加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_111</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>重启终端让其生效或者在当前终端下输入 <code>$source ~/.bashrc</code></p></li></ol><p>Ref:<br><a href="http://www.linuxidc.com/Linux/2013-11/93012.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2013-11/93012.htm</a></p>]]></content>
      
      <categories>
          
          <category> 常用软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenCV</title>
      <link href="/awesome-installation/posts/opencv.html"/>
      <content type="html"><![CDATA[<a id="more"></a><p>本文介绍如何在 Ubuntu 16.04 LTS 上安装 OpenCV 2.4.13.3 。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>OpenCV Release 版本的官网为： <a href="http://opencv.org/releases.html" target="_blank" rel="noopener">http://opencv.org/releases.html</a>。选择最新的 OpenCV 2.4.13.3<br>进行下载。</p><h2 id="依赖库与编译工具"><a href="#依赖库与编译工具" class="headerlink" title="依赖库与编译工具"></a>依赖库与编译工具</h2><pre><code># 更新软件源$ sudo apt update# 安装编译工具$ sudo apt install -y build-essential# 安装依赖包$ sudo apt install -y cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev# 安装可选包$ sudo apt install -y python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</code></pre><p>注： 这里使用<code>apt</code>是 Ubuntu 16.04 LTS 的一个特性，其他发行版本请补全为<code>apt-get</code>。</p><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><pre><code>$ unzip opencv-2.4.13.3.zip # 解压$ cd opencv-2.4.13.3$ mkdir build # 新建一个文件夹用于存放临时文件$ cd build$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local \-D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON ..$ make -j$ sudo make install</code></pre><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>将 OpenCV 的库加入到路径，从而让系统可以找到</p><pre><code>$ sudo vim /etc/ld.so.conf.d/opencv.conf</code></pre><p>在<code>/etc/ld.so.conf.d/opencv.conf</code>中输入如下内容：</p><pre><code>/usr/local/lib</code></pre><p>然后运行</p><pre><code>$ sudo ldconfig    #使配置生效</code></pre><p>接着编辑<code>/etc/profile</code></p><pre><code>$ sudo vim /etc/profile</code></pre><p>在文件末尾添加</p><pre><code>PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfigexport PKG_CONFIG_PATH</code></pre><p>保存该文件。</p><pre><code>$ source /etc/profile # 使其生效$ sudo updatedb # 更新数据库</code></pre><h2 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h2><pre><code>$ pythonPython 2.7.12 (default, Nov 19 2016, 06:48:10)[GCC 5.4.0 20160609] on linux2Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import cv2&gt;&gt;&gt; cv2.__version__&apos;2.4.13.3&apos;&gt;&gt;&gt;</code></pre>]]></content>
      
      <categories>
          
          <category> 工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MPICH</title>
      <link href="/awesome-installation/posts/mpich.html"/>
      <content type="html"><![CDATA[<p>首先要知道的是 MPI 并不是一种编程语言，只是一种并行库，用来指示编译器自己的程序中哪些地方需要并行，哪些地方正常串行等等。目前常用的有 MPICH 和 OPENMPI 两个 MPI 库，这里选择 MPICH 来进行安装。</p><p>其次， MPICH 最好从源码编译，这样一来可以得到和自己机器相匹配的最优性能，二来会避免今后可能出现的一些错误（我测试过直接安装 Debian 自带的 MPICH 包，结果安装过程没问题，编译程序，运行程序会出现一些错误，可能与机器相关吧）</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>MPICH最新版本目前为 3.2， 下载地址为：<a href="https://www.mpich.org/downloads/" target="_blank" rel="noopener">https://www.mpich.org/downloads/</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>进入到 MPICH 的下载目录，然后解压文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mpich-3.2.tar.gz</span><br></pre></td></tr></table></figure></p><p>然后切换至 MPICH 的源文件目录，运行<code>configure</code>,并指定安装目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd mpich-3.2</span><br><span class="line">./configure --prefix=/opt/mpich3.2</span><br></pre></td></tr></table></figure></p><p><code>configure</code>完成之后，直接<code>$ make</code>可编译 MPICH 源文件目录下的所有文件，接着<code># make install</code>就可以将 MPICH 安装在指定的安装目录。</p><p>注：这里我没有指定 C 和 Fortran 的编译器，因为 MPICH3.2 默认采用 Intel 的编译器来进行编译源文件，如果没有 Intel 编译器也会自动<code>configure</code>系统自带的一些编译器来进行编译，如果想手动指定编译器的话可以设置<code>FC</code>,<code>CC</code>等环境变量，然后再进行编译。</p><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><p>将下列语句添加到<code>$HOME/.bashrc</code>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MPICH 3.2</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/mpich3.2/bin</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/opt/mpich3.2/lib</span><br></pre></td></tr></table></figure></p><p>最后使用<code>$ source $HOME/.bashrc</code>使环境变量生效。</p>]]></content>
      
      <categories>
          
          <category> 高性能计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MPI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CUDA</title>
      <link href="/awesome-installation/posts/cuda.html"/>
      <content type="html"><![CDATA[<p>本文介绍如何在 Ubuntu 16.04 LTS 上安装 CUDA-8.0 。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载之前首先确定自己的电脑的显卡为Nvidia的显卡。其次是查询自己电脑的操作系统。</p><ul><li><p>确定自己有NVIDIA的GPU。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lspci | grep -i nvidia</span><br></pre></td></tr></table></figure><p>如果有显示nvidia的显卡信息，则表示具备上述条件。一个符合条件的示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nick@seis:~$ lspci | grep -i nvidia</span><br><span class="line">01:00.0 VGA compatible controller: NVIDIA Corporation Device 1b00 (rev a1)</span><br><span class="line">01:00.1 Audio device: NVIDIA Corporation Device 10ef (rev a1)</span><br></pre></td></tr></table></figure></li><li><p>确定自己的操作系统是cuda官网列出的支持的操作系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ uname -m &amp;&amp; cat /etc/*release</span><br></pre></td></tr></table></figure><p>官网上列出的有Fedora, OpenSUSE, RHEL, CentOS, SLES, Ubuntu。一个符合条件的示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nick@seis:~$ uname -m &amp;&amp; cat /etc/*release</span><br><span class="line">x86_64</span><br><span class="line">DISTRIB_ID=Ubuntu</span><br><span class="line">DISTRIB_RELEASE=16.04</span><br><span class="line">DISTRIB_CODENAME=xenial</span><br><span class="line">DISTRIB_DESCRIPTION=&quot;Ubuntu 16.04.1 LTS&quot;</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION=&quot;16.04.1 LTS (Xenial Xerus)&quot;</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 16.04.1 LTS&quot;</span><br><span class="line">VERSION_ID=&quot;16.04&quot;</span><br><span class="line">HOME_URL=&quot;http://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;http://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;http://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">UBUNTU_CODENAME=xenial</span><br></pre></td></tr></table></figure></li></ul><p>确认好这些信息后，从<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">官网</a>上下载对应的安装文件，这里选择下载是runfile(local)文件。</p><p>下载完成后，确认文件是否完整：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum cuda_8.0.61_375.26_linux.run</span><br><span class="line">33e1bd980e91af4e55f3ef835c103f9b  cuda_8.0.61_375.26_linux.run</span><br></pre></td></tr></table></figure></p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>删除之前安装的关于nvidia的软件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge nvidia-cuda*</span><br></pre></td></tr></table></figure></p><p>如果想安装显卡驱动的话，则采用下面的命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge nvidia-*</span><br></pre></td></tr></table></figure></p><h2 id="安装Nvidia显卡驱动"><a href="#安装Nvidia显卡驱动" class="headerlink" title="安装Nvidia显卡驱动"></a>安装Nvidia显卡驱动</h2><ol><li><p>更新系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade</span><br><span class="line">$ sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure></li><li><p>添加Nvidia显卡驱动源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:graphics-drivers/ppa</span><br></pre></td></tr></table></figure><p>运行该命令会警告是否添加，按回车继续即可。</p></li><li><p>更新系统源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>通过<code>Ctrl+Alt+F2</code>进入终端界面；</p></li><li><p>停止使用图形界面:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service lightdm stop</span><br></pre></td></tr></table></figure></li><li><p>在<code>/etc/modprobe.d/</code>目录下新建<code>blacklist-nouveau.conf</code>文件，并在该文件中写入下列信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure></li><li><p>重新生成内核initrd:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo update-initramfs -u</span><br></pre></td></tr></table></figure></li><li><p>搜索最新的驱动并安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache search nvidia*</span><br><span class="line">$ sudo apt-get install nvidia-384 # 目前为最新版本</span><br></pre></td></tr></table></figure></li><li><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装Cuda8-0"><a href="#安装Cuda8-0" class="headerlink" title="安装Cuda8.0"></a>安装Cuda8.0</h2><p>运行安装文件<code>cuda_8.0.61_375.26_linux.run</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sh cuda_8.0.61_375.26_linux.run --override</span><br></pre></td></tr></table></figure></p><p>对于安装过程中出现的选择, 除了安装显卡驱动那个选n，其他的全部选择y。</p><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><p>在<code>~/.bashrc</code>文件最后添加下列语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># CUDA-8.0</span><br><span class="line">export PATH=$PATH:/usr/local/cuda/bin</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-8.0/lib64</span><br></pre></td></tr></table></figure></p><p>然后再终端执行下述语句完成环境变量的设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></p><h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><ul><li>显示nvidia版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nvcc --version</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2016 NVIDIA Corporation</span><br><span class="line">Built on Tue_Jan_10_13:22:03_CST_2017</span><br><span class="line">Cuda compilation tools, release 8.0, V8.0.61</span><br></pre></td></tr></table></figure><ul><li><p>显示驱动版本以及GPU的内存信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ nvidia-smi</span><br><span class="line">Fri Aug  4 15:12:38 2017       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 375.26                 Driver Version: 375.26                    |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  TITAN X (Pascal)    Off  | 0000:01:00.0      On |                  N/A |</span><br><span class="line">| 23%   33C    P8    12W / 250W |    224MiB / 12188MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID  Type  Process name                               Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|    0     14522    G   /usr/lib/xorg/Xorg                             179MiB |</span><br><span class="line">|    0     15124    G   compiz                                          43MiB |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure></li><li><p>运行示例文件<br>进入<code>NVIDIA_CUDA-8.0_Samples</code>文件夹下（默认在<code>$HOME</code>目录下），运行<code>make</code>进行编译，<br>编译需要花费一定的时间。编译完成后，进入<code>bin/x86_64/linux/release</code>目录，随便找一个<br>可执行文件，这里选择<code>deviceQuery</code>,运行该文件，若得到类似于下面的结果，则表示安装无误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ ./deviceQuery</span><br><span class="line">./deviceQuery Starting...</span><br><span class="line"></span><br><span class="line"> CUDA Device Query (Runtime API) version (CUDART static linking)</span><br><span class="line"></span><br><span class="line">Detected 1 CUDA Capable device(s)</span><br><span class="line"></span><br><span class="line">Device 0: &quot;TITAN X (Pascal)&quot;</span><br><span class="line">  CUDA Driver Version / Runtime Version          8.0 / 8.0</span><br><span class="line">  CUDA Capability Major/Minor version number:    6.1</span><br><span class="line">  Total amount of global memory:                 12188 MBytes (12780175360 bytes)</span><br><span class="line">  (28) Multiprocessors, (128) CUDA Cores/MP:     3584 CUDA Cores</span><br><span class="line">  GPU Max Clock rate:                            1531 MHz (1.53 GHz)</span><br><span class="line">  Memory Clock rate:                             5005 Mhz</span><br><span class="line">  Memory Bus Width:                              384-bit</span><br><span class="line">  L2 Cache Size:                                 3145728 bytes</span><br><span class="line">  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)</span><br><span class="line">  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers</span><br><span class="line">  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers</span><br><span class="line">  Total amount of constant memory:               65536 bytes</span><br><span class="line">  Total amount of shared memory per block:       49152 bytes</span><br><span class="line">  Total number of registers available per block: 65536</span><br><span class="line">  Warp size:                                     32</span><br><span class="line">  Maximum number of threads per multiprocessor:  2048</span><br><span class="line">  Maximum number of threads per block:           1024</span><br><span class="line">  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)</span><br><span class="line">  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)</span><br><span class="line">  Maximum memory pitch:                          2147483647 bytes</span><br><span class="line">  Texture alignment:                             512 bytes</span><br><span class="line">  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)</span><br><span class="line">  Run time limit on kernels:                     Yes</span><br><span class="line">  Integrated GPU sharing Host Memory:            No</span><br><span class="line">  Support host page-locked memory mapping:       Yes</span><br><span class="line">  Alignment requirement for Surfaces:            Yes</span><br><span class="line">  Device has ECC support:                        Disabled</span><br><span class="line">  Device supports Unified Addressing (UVA):      Yes</span><br><span class="line">  Device PCI Domain ID / Bus ID / location ID:   0 / 1 / 0</span><br><span class="line">  Compute Mode:</span><br><span class="line">     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;</span><br><span class="line"></span><br><span class="line">deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 8.0, CUDA Runtime Version = 8.0, NumDevs = 1, Device0 = TITAN X (Pascal)</span><br><span class="line">Result = PASS</span><br></pre></td></tr></table></figure></li></ul><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><ol><li>安装完成后，下次登录系统的时候出现循环登录而进不去图形界面。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这种情况一般情况下是显卡驱动不是最新版本造成的，建议安装最新版本的显卡驱动。</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://askubuntu.com/questions/799184/how-can-i-install-cuda-on-ubuntu-16-04" target="_blank" rel="noopener">https://askubuntu.com/questions/799184/how-can-i-install-cuda-on-ubuntu-16-04</a></li><li><a href="http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4HIBXnwyt" target="_blank" rel="noopener">http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4HIBXnwyt</a></li><li><a href="http://www.52nlp.cn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%BB%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-ubuntu-16-04-nvidia-gtx-1080-cuda-8#comments" target="_blank" rel="noopener">http://www.52nlp.cn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%BB%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-ubuntu-16-04-nvidia-gtx-1080-cuda-8#comments</a></li></ul>]]></content>
      
      <categories>
          
          <category> 高性能计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GPU </tag>
            
            <tag> Cuda </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Debian升级系统至Stretch</title>
      <link href="/awesome-installation/posts/debian.html"/>
      <content type="html"><![CDATA[<ol><li><strong>做好数据备份(最重要)</strong></li><li><strong>升级Debian 8系统上的所有软件</strong><br>在升级到Debian 9系统之前，要把当前系统上的所有软件升级到最新版本，输入下面的命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade -y</span><br></pre></td></tr></table></figure></li></ol><p>如果升级的过程中遇到个人软件下载存在问题，那就是源的问题，更换其他源即可解决。</p><ol><li><p><strong>更新source.list软件源文件</strong><br>现在编辑Debian的apt软件源文件/etc/apt/sources.list，将文件中所有的jessie替换成stretch。我们可以用sed命令来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sed -i &apos;s/jessie/stretch/g&apos; /etc/apt/sources.list</span><br></pre></td></tr></table></figure></li><li><p><strong>再次升级软件包</strong><br>在更新完软件源文件后，先升级软件包。这一步被称为最小化升级(minimal upgrade)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade -y</span><br></pre></td></tr></table></figure></li><li><p><strong>升级系统版本至Debian 9 Stretch</strong><br>再升级系统版本，输入下面的命令。这一步被称为全体升级(full upgrade)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get dist-upgrade -y</span><br></pre></td></tr></table></figure></li><li><p><strong>清除旧的依赖关系和软件安装包</strong><br>分别执行下面的两个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get autoremove</span><br><span class="line">$ sudo apt-get clean</span><br></pre></td></tr></table></figure></li><li><p><strong>验证系统版本</strong><br>现在你的系统应该成功地升级到了Debian 9。重启系统，然后检查系统版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># reboot</span><br></pre></td></tr></table></figure></li></ol><p>查看当前系统的版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~# lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:  Debian</span><br><span class="line">Description:      Debian GNU/Linux 9.0 (stretch)</span><br><span class="line">Release:            9.0</span><br><span class="line">Codename:       stretch</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SCOTCH</title>
      <link href="/awesome-installation/posts/scotch.html"/>
      <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Scotch最新版本目前为 6.0.4， 下载地址为：<a href="https://gforge.inria.fr/projects/scotch" target="_blank" rel="noopener">https://gforge.inria.fr/projects/scotch</a></p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p>安装scotch依赖于make工具以及<code>lex</code>和<code>yacc</code>，可以通过如下命令确定自己的系统是否包含上述工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ make --version</span><br><span class="line">$ which lex</span><br><span class="line">$ which yacc</span><br></pre></td></tr></table></figure><p>如果没有，可以通过apt包管理系统进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install make</span><br><span class="line">$ sudo apt install flex   # install lex</span><br><span class="line">$ sudo apt install bison  # install yacc</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>1.在src/目录下创建<code>Makefile.inc</code>文件。首先进入<code>src/</code>下，然后再进入<code>Make.inc/</code>子目录寻找适合自己系统的文件，如果您的系统是<code>x86_64</code>构架的，而且也安装了icc编译器，那么您可以选择<code>Makefile.inc.x86-64_pc_linux2.icc</code>文件。并回到src/目录下，建立软链接如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s Make.inc/Makefile.inc.x86-64_pc_linux2.icc Makefile.inc</span><br></pre></td></tr></table></figure><h2 id="安装-scotch"><a href="#安装-scotch" class="headerlink" title="安装 scotch"></a>安装 scotch</h2><p>一旦您建立了自己的Makefile.inc文件，那么安装scotch只是一个很简单的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make scotch          #将scotch安装在src/上一级目录下</span><br></pre></td></tr></table></figure><h2 id="安装-ptscotch"><a href="#安装-ptscotch" class="headerlink" title="安装 ptscotch"></a>安装 ptscotch</h2><p>安装ptscotch首先需要MPI环境，因此需要安装MPICH或OPENMPI。安装MPICH的步骤<a href="mpich-install.html">点击这里</a>，安装OPENMPI的步骤可参考<a href="http://seisman.info/linux-environment-for-seismology-research.html" target="_blank" rel="noopener">SeisMan</a>。<br>有了MPI环境后, 需要对刚才新建的<code>Makefile.inc</code>进行修改，由于文件比较小，这里贴上我修改过的<code>Makefile.inc</code>文件。<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">EXE=</span><br><span class="line">LIB= .a</span><br><span class="line">OBJ= .o</span><br><span class="line"></span><br><span class="line">MAKE= make</span><br><span class="line">AR= ar</span><br><span class="line">ARFLAGS= -ruv</span><br><span class="line">CAT= cat</span><br><span class="line">CCS= icc</span><br><span class="line">CCP= mpicc</span><br><span class="line">CCD= icc</span><br><span class="line">INC     = /opt/mpich3.2/<span class="keyword">include</span>  <span class="comment"># 新增此行， 根据自己MPICH的安装目录修改</span></span><br><span class="line">CFLAGS= -O3 -I<span class="variable">$(INC)</span> -DCOMMON_FILE_COMPRESS_GZ -DCOMMON_PTHREAD -DCOMMON_RANDOM_FIXED_SEED -DSCOTCH_RENAME -DSCOTCH_PTHREAD  -DIDXSIZE64 <span class="comment"># 去掉了 -restrict 选项，不然编译会报错</span></span><br><span class="line">CLIBFLAGS=</span><br><span class="line">LDFLAGS= -lz -lm -lrt -pthread -lirc <span class="comment"># 新增 INTEL 的 irc 库文件，不然编译会报错</span></span><br><span class="line">CP= cp</span><br><span class="line">LEX= flex -Pscotchyy -olex.yy.c</span><br><span class="line">LN= ln</span><br><span class="line">MKDIR= mkdir</span><br><span class="line">MV= mv</span><br><span class="line">RANLIB= ranlib</span><br><span class="line">YACC= bison -pscotchyy -y -b y</span><br></pre></td></tr></table></figure></p><p>修改上述地方后，<code>$ make ptscotch</code> 进行ptscotch的安装。</p><h2 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make check</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数学库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCOTCH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MUMPS</title>
      <link href="/awesome-installation/posts/mumps.html"/>
      <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载,需要上下面的网站去预留信息，然后开发者会在几小时内将软件发至你留的邮箱中，建议下载最新版本5.1.1。</p><p>源码：<a href="http://graal.ens-lyon.fr/MUMPS/" target="_blank" rel="noopener">http://graal.ens-lyon.fr/MUMPS/</a> , 如果该链接无法访问，请访问 <a href="https://launchpad.net/ubuntu/+source/mumps/5.1.1-2" target="_blank" rel="noopener">https://launchpad.net/ubuntu/+source/mumps/5.1.1-2</a> , 该网页中有个名为<code>mumps_5.1.1.orig.tar.gz</code>,下载该文件即可。</p><h2 id="基本依赖包"><a href="#基本依赖包" class="headerlink" title="基本依赖包"></a>基本依赖包</h2><p>安装MUMPS有三种方式，一种是只安装单核版(sequential version);一种是安装多核版(multicore machine)；最后一种是并行版(parallel version).由于笔者安装MUMPS的主要目的是用于FWI，因此对于运行速度要求很高，在此选择并行版进行安装。其它方式的安装比较简单，读者可自行尝试。</p><p>安装并行版MUMPS需要以下一些依赖包</p><ul><li><p>MPI</p></li><li><p>BLAS library</p></li><li><p>BLACS library</p></li><li><p>ScaLAPACK library</p></li></ul><p>其中 MPI 一般有两种 MPICH 和 OPENMPI, 安装 MPICH <a href="mpich.html">请点击这里</a>；至于BLAS，BLACS，ScaLAPACK 这三个库可使用 Intel 的 MKL 库，因此需要安装 intel 的编译器，<a href="intel.html">请点击这里</a>。</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar zxvf MUMPS_5.1.1.tar.gz</span><br><span class="line">$ cd MUMPS_5.1.1</span><br></pre></td></tr></table></figure><h3 id="修改Makefile-inc"><a href="#修改Makefile-inc" class="headerlink" title="修改Makefile.inc"></a>修改Makefile.inc</h3><p>安装好intel编译器后，在此可直接复制 <code>Make.inc/</code> 目录下的 <code>Makefile.INTEL.PAR</code> 文件至 MUMPS 的根目录，并修改一些参数使之与自己的系统相符。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp Make.inc/Makefile.INTEL.PAR ./Makefile.inc</span></span><br></pre></td></tr></table></figure><p>由于 MUMPS 需要依赖与 METIS 或 SCOTCH 来划分网格，两种选一种即可，此处选择的是 METIS，下载 METIS 并编译好 METIS 后，需要修改刚才的<code>Makefile.inc</code>文件，具体改动如下：</p><p>去掉<code>LMETISDIR</code>和<code>LMETIS</code>前的注释，并根据自己METIS的安装情况给其赋值，然后，在添加<code>-Dmetis</code>在<code>ORDERINGSF</code>之后。 例如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  This file is part of MUMPS 5.1.1, released</span></span><br><span class="line"><span class="comment">#  on Mon Mar 20 14:34:33 UTC 2017</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#Begin orderings</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE that PORD is distributed within MUMPS by default. It is recommended to</span></span><br><span class="line"><span class="comment"># install other orderings. For that, you need to obtain the corresponding package</span></span><br><span class="line"><span class="comment"># and modify the variables below accordingly.</span></span><br><span class="line"><span class="comment"># For example, to have Metis available within MUMPS:</span></span><br><span class="line"><span class="comment">#          1/ download Metis and compile it</span></span><br><span class="line"><span class="comment">#          2/ uncomment (suppress # in first column) lines</span></span><br><span class="line"><span class="comment">#             starting with LMETISDIR,  LMETIS</span></span><br><span class="line"><span class="comment">#          3/ add -Dmetis in line ORDERINGSF</span></span><br><span class="line"><span class="comment">#             ORDERINGSF  = -Dpord -Dmetis</span></span><br><span class="line"><span class="comment">#          4/ Compile and install MUMPS</span></span><br><span class="line"><span class="comment">#             make clean; make   (to clean up previous installation)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#          Metis/ParMetis and SCOTCH/PT-SCOTCH (ver 6.0 and later) orderings are recommended.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SCOTCHDIR  = $&#123;HOME&#125;/scotch_6.0</span></span><br><span class="line"><span class="comment">#ISCOTCH    = -I$(SCOTCHDIR)/include</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You have to choose one among the following two lines depending on</span></span><br><span class="line"><span class="comment"># the type of analysis you want to perform. If you want to perform only</span></span><br><span class="line"><span class="comment"># sequential analysis choose the first (remember to add -Dscotch in the ORDERINGSF</span></span><br><span class="line"><span class="comment"># variable below); for both parallel and sequential analysis choose the second</span></span><br><span class="line"><span class="comment"># line (remember to add -Dptscotch in the ORDERINGSF variable below)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#LSCOTCH    = -L$(SCOTCHDIR)/lib -lesmumps -lscotch -lscotcherr</span></span><br><span class="line"><span class="comment">#LSCOTCH    = -L$(SCOTCHDIR)/lib -lptesmumps -lptscotch -lptscotcherr</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LPORDDIR = <span class="variable">$(topdir)</span>/PORD/lib/</span><br><span class="line">IPORD    = -I<span class="variable">$(topdir)</span>/PORD/<span class="keyword">include</span>/</span><br><span class="line">LPORD    = -L<span class="variable">$(LPORDDIR)</span> -lpord</span><br><span class="line"></span><br><span class="line"><span class="comment">################## 修改部位1 ###################</span></span><br><span class="line">LMETISDIR = <span class="variable">$(HOME)</span>/software/metis/lib</span><br><span class="line">IMETIS    = <span class="variable">$(HOME)</span>/software/metis/<span class="keyword">include</span></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You have to choose one among the following two lines depending on</span></span><br><span class="line"><span class="comment"># the type of analysis you want to perform. If you want to perform only</span></span><br><span class="line"><span class="comment"># sequential analysis choose the first (remember to add -Dmetis in the ORDERINGSF</span></span><br><span class="line"><span class="comment"># variable below); for both parallel and sequential analysis choose the second</span></span><br><span class="line"><span class="comment"># line (remember to add -Dparmetis in the ORDERINGSF variable below)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################## 修改部位2 ###################</span></span><br><span class="line">LMETIS    = -L<span class="variable">$(LMETISDIR)</span> -lmetis</span><br><span class="line"><span class="comment">#LMETIS    = -L$(LMETISDIR) -lparmetis -lmetis</span></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following variables will be used in the compilation process.</span></span><br><span class="line"><span class="comment"># Please note that -Dptscotch and -Dparmetis imply -Dscotch and -Dmetis respectively.</span></span><br><span class="line"><span class="comment"># If you want to use Metis 4.X or an older version, you should use -Dmetis4 instead of -Dmetis</span></span><br><span class="line"><span class="comment"># or in addition with -Dparmetis (if you are using parmetis 3.X or older).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################## 修改部位3 ###################</span></span><br><span class="line"><span class="comment">#ORDERINGSF = -Dscotch -Dmetis -Dpord -Dptscotch -Dparmetis</span></span><br><span class="line">ORDERINGSF  = -Dpord -Dmetis</span><br><span class="line">ORDERINGSC  = <span class="variable">$(ORDERINGSF)</span></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line"></span><br><span class="line">LORDERINGS = <span class="variable">$(LMETIS)</span> <span class="variable">$(LPORD)</span> <span class="variable">$(LSCOTCH)</span></span><br><span class="line">IORDERINGSF = <span class="variable">$(ISCOTCH)</span></span><br><span class="line">IORDERINGSC = <span class="variable">$(IMETIS)</span> <span class="variable">$(IPORD)</span> <span class="variable">$(ISCOTCH)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#End orderings</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line">PLAT    =</span><br><span class="line">LIBEXT  = .a</span><br><span class="line">OUTC    = -o</span><br><span class="line">OUTF    = -o</span><br><span class="line">RM = /bin/rm -f</span><br><span class="line">CC = mpiicc</span><br><span class="line">FC = mpiifort</span><br><span class="line">FL = mpiifort</span><br><span class="line">AR = ar vr</span><br><span class="line"><span class="comment">#RANLIB = ranlib</span></span><br><span class="line">RANLIB  = echo</span><br><span class="line"><span class="comment"># Make this variable point to the path where the Intel MKL library is</span></span><br><span class="line"><span class="comment"># installed. It is set to the default install directory for Intel MKL.</span></span><br><span class="line">MKLROOT=/opt/intel/mkl/lib/intel64</span><br><span class="line">LAPACK = -L<span class="variable">$(MKLROOT)</span> -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core</span><br><span class="line">SCALAP = -L<span class="variable">$(MKLROOT)</span> -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64</span><br><span class="line"></span><br><span class="line">LIBPAR = <span class="variable">$(SCALAP)</span> <span class="variable">$(LAPACK)</span></span><br><span class="line"></span><br><span class="line">INCSEQ = -I<span class="variable">$(topdir)</span>/libseq</span><br><span class="line">LIBSEQ  = <span class="variable">$(LAPACK)</span> -L<span class="variable">$(topdir)</span>/libseq -lmpiseq</span><br><span class="line"></span><br><span class="line">LIBBLAS = -L<span class="variable">$(MKLROOT)</span> -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core</span><br><span class="line">LIBOTHERS = -lpthread</span><br><span class="line"></span><br><span class="line"><span class="comment">#Preprocessor defs for calling Fortran from C (-DAdd_ or -DAdd__ or -DUPPER)</span></span><br><span class="line">CDEFS   = -DAdd_</span><br><span class="line"></span><br><span class="line"><span class="comment">#Begin Optimized options</span></span><br><span class="line">OPTF    = -O -nofor_main -qopenmp <span class="comment"># or -openmp for old compilers</span></span><br><span class="line">OPTL    = -O -nofor_main -qopenmp</span><br><span class="line">OPTC    = -O -qopenmp</span><br><span class="line"><span class="comment">#End Optimized options</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################## 修改部位4 ###################</span></span><br><span class="line">INCS = <span class="variable">$(INCPAR)</span> -I<span class="variable">$(IMETIS)</span></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line"></span><br><span class="line">LIBS = <span class="variable">$(LIBPAR)</span></span><br><span class="line">LIBSEQNEEDED =</span><br></pre></td></tr></table></figure><h3 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make alllib</span><br></pre></td></tr></table></figure><p>编译完成后，可以在MUMPS的安装目录下发现有目录lib/,该目录主要用于链接外部函数调用此库文件。<br><div class="alert alert-warning"><i class="fa fa-bell"></i>  运行 `make alllib` 之后，可能会报错，错误信息为'ar: two different operation options specified'，其主要原因在于 Makefile.inc 文件中 AR 变量的设置存在问题。需要在后面补充一个空格符，即可完成正常安装。</div></p>]]></content>
      
      <categories>
          
          <category> 数学库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MUMPS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>METIS</title>
      <link href="/awesome-installation/posts/metis.html"/>
      <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>选择最新版本(5.1.0)进行下载：</p><p>源码链接：<a href="http://glaros.dtc.umn.edu/gkhome/metis/metis/download" target="_blank" rel="noopener">http://glaros.dtc.umn.edu/gkhome/metis/metis/download</a></p><h2 id="基本依赖包"><a href="#基本依赖包" class="headerlink" title="基本依赖包"></a>基本依赖包</h2><ul><li><p>C compiler，比如 gcc</p></li><li><p>GNU make ,一般Linux系统自带</p></li><li><p>Cmake 2.8以上</p></li></ul><h3 id="修改头文件-可选"><a href="#修改头文件-可选" class="headerlink" title="修改头文件(可选)"></a>修改头文件(可选)</h3><p>修改<code>include/metis.h</code>文件中的<code>IDXTYPEWIDTH</code>，来指定系统浮点位宽，32bit 系统只能选择32, 64bit 系统即可选择32，也可选择64.具体根据自己需求决定</p><h3 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make config shared=1 cc=gcc prefix=/where/to/install/metis</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>编译完成后，可以在METIS的安装目录下发现有目录<code>lib/</code>,该目录主要用于链接外部函数调用此库文件。</p>]]></content>
      
      <categories>
          
          <category> 数学库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> METIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TOY2DAC</title>
      <link href="/awesome-installation/posts/toy2dac.html"/>
      <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载链接:<a href="https://seiscope2.obs.ujf-grenoble.fr/TOY2DAC,82" target="_blank" rel="noopener">https://seiscope2.obs.ujf-grenoble.fr/TOY2DAC,82</a></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>将下载的软件解压后，进入<code>doc/</code>目录下，查看manual文档进行编译。</p><h2 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h2><p>安装TOY2DAC需要MUMPS来进行大型稀疏矩阵的LU分解，而MUMPS又要安装METIS或者SCOTCH，同时，编译MUMPS来依赖 SCALAPACK, BLACKS, LAPACK 三个依赖库文件，好在这些都在Intel的MKL库中集成，因此实际上只需要安装Intel编译器，MPI，METIS，MUMPS。这几个软件的安装可参考如下链接：</p><ul><li><a href="intel.html">Intel编译器</a></li><li><a href="mpich.html">MPI库</a></li><li><a href="metis.html">METIS</a></li><li><a href="mumps.html">MUMPS</a></li></ul><h2 id="修改Makefile-inc"><a href="#修改Makefile-inc" class="headerlink" title="修改Makefile.inc"></a>修改Makefile.inc</h2><p>安装完上述依赖包后，进入<code>src/</code>，找到<code>Makefile.inc</code>文件并编辑该文件，需要修改上述库文件的<code>LIB</code>和<code>INC</code>为其安装目录。原文件需要改动的地方不多。笔者主要修改了如下几处：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#ROOT DIR OF MUMPS/METIS</span><br><span class="line">LADIR = ~/software</span><br><span class="line"></span><br><span class="line">#ROOT DIR OF TOOL BOX</span><br><span class="line">LTOOLS_BOX = ~/software/TOOLBOX_OPTIMIZATION</span><br><span class="line"></span><br><span class="line">#MUMPS LIB AND INC</span><br><span class="line">LMUMPS = -L$(LADIR)/MUMPS_5.1.1/lib -lcmumps -lmumps_common</span><br><span class="line">IMUMPS = -I$(LADIR)/MUMPS_5.1.1/include</span><br><span class="line"></span><br><span class="line">#PORD LIB (INSIDE MUMPS)</span><br><span class="line">LPORDDIR = $(LADIR)/MUMPS_5.1.1/PORD/lib/</span><br><span class="line">LPORD    = -L$(LPORDDIR) -lpord</span><br><span class="line"></span><br><span class="line">#METIS LIB</span><br><span class="line">LMETISDIR = $(LADIR)/metis/lib</span><br><span class="line">LMETIS    = -L$(LMETISDIR) -lmetis</span><br><span class="line"></span><br><span class="line">#TOOL BOX LIB AND INC</span><br><span class="line">LOPTIM = -L $(LTOOLS_BOX)/lib -lSEISCOPE_OPTIM</span><br><span class="line">IOPTIM  = -I $(LTOOLS_BOX)/COMMON/include</span><br><span class="line"></span><br><span class="line">#WE GATHER EVERYTHINGS</span><br><span class="line">LIBPAR = $(LMUMPS) $(LPORD) $(LOPTIM)  $(LMETIS)  $(LMKL)</span><br><span class="line">INCPAR = $(IMUMPS) $(IPORD) $(IOPTIM) -I../include</span><br><span class="line"></span><br><span class="line">INC = $(INCPAR)</span><br><span class="line">LIB = $(LIBPAR)</span><br></pre></td></tr></table></figure><h3 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h3><p>在<code>src/</code>目录下，运行 <code>make</code>，便完成整个编译过程</p>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> toy2dac </tag>
            
            <tag> FWI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TOOLBOX-OPTIMIZATION</title>
      <link href="/awesome-installation/posts/toolbox-optimization.html"/>
      <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载链接: <a href="https://seiscope2.obs.ujf-grenoble.fr/SEISCOPE-OPTIMIZATION-TOOLBOX" target="_blank" rel="noopener">https://seiscope2.obs.ujf-grenoble.fr/SEISCOPE-OPTIMIZATION-TOOLBOX</a></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>将下载的软件解压后，进入<code>doc/</code>目录下，查看manual文档进行编译。</p><h2 id="修改Makefile-inc"><a href="#修改Makefile-inc" class="headerlink" title="修改Makefile.inc"></a>修改Makefile.inc</h2><p><code>Makefile.inc</code>文件位于根目录下，只需要修改与自己系统相适的编译器即可，一般情况不用作任何改动，因为其默认使用的是intel的编译器。</p><h3 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h3><p>在根目录下，运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make lib</span><br></pre></td></tr></table></figure></p><p>即可在目录<code>lib/</code>下生成<code>libSEISCOPE_OPTIM.a</code>,该文件对于后面安装TOY2DAC十分有用。</p>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> toolbox </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SPECFEM3D</title>
      <link href="/awesome-installation/posts/SPECFEM3d.html"/>
      <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>要下载SPECFEM3D，可以在终端中输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --recursive --branch devel https://github.com/geodynamics/specfem3d.git</span><br></pre></td></tr></table></figure><h2 id="可选依赖包"><a href="#可选依赖包" class="headerlink" title="可选依赖包"></a>可选依赖包</h2><p>以下安装包均为可选。</p><ul><li><a href="intel.html">ifort编译器</a>，可使用 gfortran 代替。</li><li><a href="mpich.html">mpi并行环境</a>，可安装不带 MPI 加速的版本</li><li><a href="scotch.html">scotch</a>，安装SPECFEM3D时会自动安装其目录下绑定的scotch版本，但版本不是最新版本</li></ul><p>上述工具中建议安装 ifort 编译器，使用 gfortran 编译，可能会出现一些问题且编译效率低。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>进入specfem3d的根目录进行安装。</p><h3 id="安装不带MPI的版本"><a href="#安装不带MPI的版本" class="headerlink" title="安装不带MPI的版本"></a>安装不带MPI的版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure FC=ifort --without-mpi</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><h3 id="安装带MPI的版本"><a href="#安装带MPI的版本" class="headerlink" title="安装带MPI的版本"></a>安装带MPI的版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure FC=ifort MPIFC=/opt/mpich3.2/bin/mpif90 MPI_INC=/opt/mpich3.2/include --with-mpi</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><div class="alert alert-warning"><i class="fa fa-bell"></i>  注意：这里最好显式地给出`mpif90`的路径，不然编译的时候会调用系统里安装的其他`mpif90`,然后就是给出MPI的include变量`MPI_INC`，编译的时候会用到`mpi.h`头文件，所以需要从`MPI_INC`里找。</div><h3 id="安装带-MPI-且使用非-SPECFEM3D-绑定的-scotch-版本"><a href="#安装带-MPI-且使用非-SPECFEM3D-绑定的-scotch-版本" class="headerlink" title="安装带 MPI 且使用非 SPECFEM3D 绑定的 scotch 版本"></a>安装带 MPI 且使用非 SPECFEM3D 绑定的 scotch 版本</h3><p>和安装带 MPI 的版本的差不多，只不过，采用的是下面的configure<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure FC=ifort MPIFC=/opt/mpich3.2/bin/mpif90 MPI_INC=/opt/mpich3.2/include --with-mpi -with-scotch-dir=/opt/scotch_6.0.4</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure></p><div class="alert alert-warning"><i class="fa fa-bell"></i>  注意：本文给出的`/opt/mpich3.2`,`/opt/scotch_6.0.4`只是个例子，大家根据自己 mpich 和 scotch 的安装位置进行适当修改，没有必要一定要将 mpich 和 scotch 安装在`/opt`下。</div><p>编译完成后，可以在 specfem3d 的根目录下发现有一个新的目录 <code>bin/</code>,该目录下包含 specfem3d 的二进制可执行文件。</p>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEM </tag>
            
            <tag> SPECFEM3D </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SPECFEM2D</title>
      <link href="/awesome-installation/posts/SPECFEM2d.html"/>
      <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>要下载SPECFEM2D，可以在终端中输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --recursive --branch devel https://github.com/geodynamics/specfem2d.git</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装SPECFEM 2D需要安装</p><ul><li><a href="intel.html">ifort编译器</a></li><li><a href="mpich.html">mpi并行环境</a></li><li><a href="scotch.html">scotch</a></li></ul><p>有了上述工具之后，我们可以进入specfem2d的根目录进行安装。</p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure MPIFC=/opt/mpich3.2/bin/mpif90 MPI_INC=/opt/mpich3.2/include --with-mpi</span><br></pre></td></tr></table></figure><h3 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br></pre></td></tr></table></figure><p>编译完成后，可以在specfem2d的根目录下发现有一个新的目录bin/,该目录下包含specfem2d的二进制可执行文件。</p>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEM </tag>
            
            <tag> SPECFEM2D </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SEPlib</title>
      <link href="/awesome-installation/posts/seplib.html"/>
      <content type="html"><![CDATA[<h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>下载最新版本的 SEPlib，目前为6.5.3. 实际有7.0.5，但官网上没有链接了，估计人都转向 Madagascar 了。</p><p>下载地址： <a href="http://sepwww.stanford.edu/doku.php?id=sep:software:installing_seplib" target="_blank" rel="noopener">http://sepwww.stanford.edu/doku.php?id=sep:software:installing_seplib</a></p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p>安装 SEPlib-6.5.3，需要一些依赖包，由于笔者之前安装过 Madagascar 以及SU，因此 大部分的依赖包基本安装完毕，但还需要安装下列依赖包:</p><pre><code>$ sudo apt-get install flex  # lex$ sudo apt-get install libpawlib-lesstif3-dev # lesstif</code></pre><p>这里需要注意的是<code>lesstif</code>包。不同版本的Debian系统可能含有的软件包不一样，具体以自己版本为主。</p><h2 id="基础安装"><a href="#基础安装" class="headerlink" title="基础安装"></a>基础安装</h2><p>最好使用<code>ifort</code>来编译代码，在<code>configure</code>前需要显式指出下列环境变量:</p><pre><code>$ export CC=icc      # C 编译器$ export FC=ifort    # Fortran 编译器$ export CFCDEFINES=-DpgiFortran # 如果不设置此项，后面链接finitpar会出错</code></pre><p>另外，一点需要注意的是，如果使用<code>ifort</code>来编译，运行下面的命令后，需要查看<code>ifort</code>是否已经设置为Fortran编译器，这点很重要，因为一般如果将 SEPlib 安装在<code>/opt</code>下的话，需要使用<code>root</code>权限，而我们一般将<code>ifort</code>的环境变量设置在自己的用户目录下，因此<code>configure</code>时检查<code>ifort</code>会出现没有<code>ifort</code>而采用系统的一些Fortran编译器。</p><pre><code>$ ./configure --prefix=/opt/SEPlib --with-su=/su/installed/dir --with-local</code></pre><p><code>configure</code>完成后，在终端键入下面命令，将编译 SEPlib，并将其安装至指定地文件目录下</p><pre><code>$ make$ make install</code></pre><p>在编译的过程中可能出现哑元类型不匹配的问题，主要原因是因为源程序<code>super_chain_mod.f90</code>部分代码输入参数定义不严谨所致，修改该程序中部分代码即可解决此类问题。需要修改的部分如下所示.</p><pre><code>integer function flat_chain_exec( adj, add, model, data) ! W Grad K  integer       ::stat  logical,intent(in)      :: adj, add                                ! 28  real          :: data(:), model(:)integer function flat_chain_adj_exec( adj, add, model, data) ! K&apos; Grad&apos; W&apos;  integer       ::stat  ! logical       :: adj, add,adj_new  logical,intent(in)        :: adj, add                              ! 51  logical       :: adj_new                                           ! 52  real          :: data(:), model(:)integer function flat3_chain_exec( adj, add, model, data)  integer       ::stat  logical,intent(in)        :: adj, add                              ! 115  real          :: data(:), model(:)integer function flat3_chain_adj_exec( adj, add, model, data)  integer       ::stat  logical,intent(in)        :: adj, add                              ! 142  logical       :: adj_new                                           ! 143</code></pre><h2 id="环境变量的设置"><a href="#环境变量的设置" class="headerlink" title="环境变量的设置"></a>环境变量的设置</h2><p>环境变量的设置，这一步是非常重要的，正确设置环境变量对以后正常使用大有裨益。在此，笔者借鉴了 Madagascar 的环境变量设置方案，可以在 SEPlib 的安装目录<code>SEPROOT</code>下的<code>share</code>目录中建立一文件夹名叫<code>seplib</code>（读者可自行取其他名字），根据用户自己的<code>shell</code>类型来创建不同的环境变量执行脚本，对于<code>csh</code>用户，创建<code>env.csh</code>；而对<code>bash</code>用户，则创建<code>env.sh</code>.下面分别给出不同的<code>shell</code>类型的脚本，供大家参考，至于具体目录文件的设置，根据自己的喜好设置。</p><p><code>csh</code>文件</p><pre><code>#!/bin/csh# Path for SEPlib installation directorysetenv SEPROOT /opt/seplib# Path for SEPlib source directorysetenv SEPSRC /home/abc/seplib-6.5.3# Path for Python packagesif ($?PYTHONPATH) thensetenv PYTHONPATH $SEPROOT/lib/python:${PYTHONPATH}elsesetenv PYTHONPATH $SEPROOT/lib/pythonendif# Path for binary data files part of SEP datasets# setenv DATAPATH /var/tmp/# Path for manual pagessetenv MANPATH `manpath`:$SEPROOT/man# Path for shared object files# if ($?LD_LIBRARY_PATH) then# setenv LD_LIBRARY_PATH $SEPROOT/lib:${LD_LIBRARY_PATH}# else# setenv LD_LIBRARY_PATH $SEPROOT/lib# endif# Path for executablesset path = ($SEPROOT/bin $path)# Path for vplot filessetenv VPLOTSPOOLDIR /var/tmp/SEP/Figs/# Path for vplot fontssetenv VPLOTFONTDIR $SEPROOT/include# Path for SEP includedirsetenv SEPINC $SEPROOT/include</code></pre><p><code>bash</code>文件</p><pre><code>#!/bin/sh# Path for SEPlib installation directoryexport SEPROOT=/opt/seplib# Path for SEPlib source directoryexport SEPSRC=/home/abc/seplib-6.5.3# Path for Python packagesif [ -n &quot;$PYTHONPATH&quot; ]; thenexport PYTHONPATH=$SEPROOT/lib/python:${PYTHONPATH}elseexport PYTHONPATH=$SEPROOT/lib/pythonfi# Path for binary data files part of SEP datasets# export DATAPATH=/var/tmp/# Path for manual pagesunset MANPATHexport MANPATH=`manpath`:$SEPROOT/man# Path for shared object files# if [ -n &quot;$LD_LIBRARY_PATH&quot; ]; then# export LD_LIBRARY_PATH=$SEPROOT/lib:${LD_LIBRARY_PATH}# else# export LD_LIBRARY_PATH=$SEPROOT/lib# fi# Path for executablesexport PATH=$SEPROOT/bin:$PATH# Path for vplot filesexport VPLOTSPOOLDIR=/var/tmp/SEP/Figs/# Path for vplot fontsexport VPLOTFONTDIR=$SEPROOT/include# Path for SEP includedirexport SEPINC=$SEPROOT/include</code></pre><p>这样设置好了之后，我们需要修改自己的<code>~/.bashrc</code>文件,在文件最后面添加如下几句,这样环境变量就设置好了。</p><pre><code># SEPlib 6.5.3export SEPROOT=/opt/seplibsource $SEPROOT/share/seplib/env.sh</code></pre><p>修改<code>~/.bashrc</code>文件之后，我们只需要在当前终端键入如下命令，即可使环境变量马上生效:</p><pre><code>$ source ~/.bashrc</code></pre><h2 id="安装更多功能的SEPlib"><a href="#安装更多功能的SEPlib" class="headerlink" title="安装更多功能的SEPlib"></a>安装更多功能的SEPlib</h2><p>在成功安装了不带 FFTW 以及 MPI 库的 SEPlib. 下面介绍安装一个更完整的 SEPlib。</p><p>由于对 SEPlib 的源代码以及整个程序框架有了更进一步的了解，所以这次选择更高级一点的安装方式。首先在安装源文件的根目录执行如下命令:</p><pre><code>$ cp docs/config-examples/RUN_THIS.base .</code></pre><p>然后修改该文件，整体文件不再大改，只需要根据自己的需求修改其中的某些变量即可。由于这次主要是加入 OPENMP 和 FFTW。之所以没安装 MPI 主要是因为 OPENMP 适合于共享式内存计算机。下面列出一些基本的参数设置信息</p><pre><code>setenv CC gccsetenv FC ifortsetenv FFTW_FCLD &quot;-L/usr/lib/x86_64-linux-gnu/ -lfftw3 -lfftw3f&quot; # 根据自己 FFTW 的位置修改setenv OMP_FCFLAGS -openmp # -openmp 为 Intel 编译器的选项，其他编译器不一样，需修改成该编译器的 OPENMP 选项setenv OMP_FCLD &quot;-L/opt/intel/compilers_and_libraries_2016/linux/lib/intel64/ -liomp5 -liompstubs5&quot; # 根据自己　Intel openmp 动态链接库的位置修改./configure --prefix=/opt/SEPlib --with-su=/su/installed/dir --with-local --with-fftw --with-omp</code></pre><p>修改完成后，保存文件，在终端对文件添加可执行权限,并执行脚本:</p><pre><code>$ chmod +x RUN_THIS.base$ ./RUN_THIS.base ＃运行脚本</code></pre><p>键入上述命令后,将会编译整个源文件，在编译的过程中遇到一些问题，主要原因是源文件的 Makefile 文件存在一些问题。这里列出本人安装过程中出现的一些错误：</p><p>Bug1: 编译<code>Transf_fftw</code>时出错，出现<code>undefined reference omp_get_num_threads</code></p><p>解决: 修改<code>Transf_fftw.f90</code>所在文件目录的 Makefile 文件，在484行末尾，即<code>Transf_fftw_LDADD</code>这行末尾添加<code>${OMP_FCLD}</code>，然后在504,506,508,511行中加入<code>${OMP_FCFLAGS}</code>,修改完保存，再回到根目录重新<code>$make</code>一下就好了。上述 Bug1 在后面还有几次编译过程仍存在此问题，解决办法是找到出错的源文件位置，按照上面提到的解决方案，添加 openmp 动态链接库位置以及编译选项，即可解决此类问题。</p><p>Bug2: 编译<code>RickMovie</code>时会出现错误，主要是类似于<code>undefined reference Xtadd/X11...</code>这样的错误。</p><p>解决: 进入<code>RickMovie</code>目录，修改<code>Makefile</code>文件，修改其中的第212行，即<code>Rickmovie_LDADD</code>所在那行，在其后添加<code>-lXt -lX11</code>即可解决此类问题，其实思路与前面omp一致，无非是没有将相关库加入编译选项中。Bug2 在后面的编译中还会遇到，主要位于<code>Ricksep</code>中，运用同样方法可以解决，不再赘述。</p><p>解决完所有的Bug1、Bug2之类的错误后，后面的编译过程基本畅通无阻，<code>$ make</code>完之后再<code>$ make install</code>，即可安装完　SEPlib，最后再设置环境变量即可正常使用。</p>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SEPlib </tag>
            
            <tag> 地震学软件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Seismic Unix</title>
      <link href="/awesome-installation/posts/seismic-unix.html"/>
      <content type="html"><![CDATA[<p>Seismic Unix是Colorado School of Mines开发的一款地震数据处理软件。最新的版本代号为44R1。<br>这里选择43R8版本进行安装。</p><p>下载地址：<a href="http://www.cwp.mines.edu/cwpcodes/index.html" target="_blank" rel="noopener">http://www.cwp.mines.edu/cwpcodes/index.html</a></p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install build-essential</span><br><span class="line">$ sudo apt-get install libx11-dev</span><br><span class="line">$ sudo apt-get install libxt-dev</span><br><span class="line">$ sudo apt-get install freeglut3-dev  </span><br><span class="line">$ sudo apt-get install libxmu-dev</span><br><span class="line">$ sudo apt-get install libxi-dev</span><br><span class="line">$ sudo apt-get install gfortran</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>一般软件的安装都是先编译，之后配置环境变量，su不同，正好相反，需要先配置环境变量。</p><p>向<code>~/.bashrc</code>中加入如下语句以配置环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Seismic Unix 44R1</span><br><span class="line">export CWPROOT=$HOME/opt/cwp</span><br><span class="line">export PATH=$PATH:$CWPROOT/bin</span><br></pre></td></tr></table></figure><p>注：<code>CWPROOT</code>为su的安装路径，请根据自己想要安装的路径确定，这里是放在了<code>$HOME/opt/cwp</code>。不要以root权限安装su，若造成系统不稳定，后果自负!!!</p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~</span><br><span class="line">$ mkdir opt</span><br><span class="line">$ cd opt</span><br><span class="line">$ mkdir cwp</span><br><span class="line">$ cd cwp</span><br><span class="line">$ wget ftp://ftp.cwp.mines.edu/pub/cwpcodes/cwp_su_all_43R8.tgz</span><br><span class="line">$ tar -xvf cwp_su_all_43R8.tgz</span><br></pre></td></tr></table></figure><h2 id="编译，安装"><a href="#编译，安装" class="headerlink" title="编译，安装"></a>编译，安装</h2><p>编译前，可以选择修改一下<code>src/Makefile.config</code>文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LINEHDRFLAG =</span><br><span class="line">#XDRFLAG =  -DSUXDR  建议将此行注释掉，此行的目的在于将所有的su文件都变成big-endian的格式</span><br><span class="line">ENDIANFLAG = -DCWP_LITTLE_ENDIAN</span><br><span class="line">LARGE_FILE_FLAG = -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ make install</span><br><span class="line">$ make xtinstall</span><br><span class="line">$ make finstall</span><br><span class="line">$ make mglinstall</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SU </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SAC</title>
      <link href="/awesome-installation/posts/SAC.html"/>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文源于<a href="http://seisman.info/" target="_blank" rel="noopener">SeisMan</a>开源项目<a href="https://github.com/seisman/SAC_Docs_zh" target="_blank" rel="noopener">SAC_Docs_zh</a></p><h2 id="申请SAC"><a href="#申请SAC" class="headerlink" title="申请SAC"></a>申请SAC</h2><p>SAC协议仅允许IRIS将SAC源码包及二进制包分发给地震学相关人员。<br>所以想要从官方渠道获取SAC软件包，必须在 IRIS 网站上申请。</p><p>SAC软件包申请地址：<a href="http://ds.iris.edu/ds/nodes/dmc/forms/sac/" target="_blank" rel="noopener">http://ds.iris.edu/ds/nodes/dmc/forms/sac/</a></p><p>申请的过程中需要注意如下几点：</p><ul><li>认真填写个人信息，否则可能会被拒绝</li><li>电子邮箱最好填写学术/单位邮箱（比如以 edu 结尾的邮箱），一般邮箱可能会被拒绝</li><li>若无学术邮箱，则需要其他信息证明你是地震学相关人员</li></ul><p>IRIS提供了SAC最新版的源码包、Linux 64位下的二进制包和Mac OSX 64位下的<br>二进制包。其中，二进制包可以在相应的平台下直接使用，源代码包则需要编译<br>才能使用。具体申请那个包由用户的操作系统决定：</p><ul><li>Linux 64位系统可以申请源码包或Linux 64位包</li><li>Mac OSX 64位系统可以申请源码包或Mac 64位包</li><li>其他系统，如Linux 32位、Mac OSX 32位、Cygwin，申请源码包</li></ul><p>提交申请之后，需要人工审核，若审核通过，则IRIS会通过邮件将软件包<br>发送给你。一般审核时间为两到三个工作日。由于审核周期稍长，建议同时<br>申请64位二进制包和源码包。</p><p>需要注意，SAC协议规定了用户没有分发SAC软件包的权利。所以，请勿将SAC<br>软件包在网络上公开。</p><h2 id="在Linux下安装SAC"><a href="#在Linux下安装SAC" class="headerlink" title="在Linux下安装SAC"></a>在Linux下安装SAC</h2><p>Linux下安装SAC，可以直接使用官方提供的二进制包，也可以手动编译源码包。<br>对于大多数用户而言，建议安装二进制包。下面会分别介绍两种安装方法，要求<br>读者了解Linux的一些基本概念和操作。</p><h3 id="安装二进制包"><a href="#安装二进制包" class="headerlink" title="安装二进制包"></a>安装二进制包</h3><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p>官方提供的二进制包中的可执行文件可以直接使用，在运行时需要用到几个动态<br>链接库。大部分Linux发行版下，都默认安装了这几个动态链接库。若不幸没有<br>安装或不确定有没有安装，可以通过如下命令安装所需的软件包。</p><p>对于Ubuntu/Debian：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install libc6 libsm6 libice6 libxpm4 libx11-6</span><br><span class="line">$ sudo apt-get install zlib1g libncurses5</span><br></pre></td></tr></table></figure><p>对于CentOS/Fedora/RHEL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install glibc libSM libICE libXpm libX11</span><br><span class="line">$ sudo yum install zlib ncurses</span><br></pre></td></tr></table></figure><h4 id="安装二进制包-1"><a href="#安装二进制包-1" class="headerlink" title="安装二进制包"></a>安装二进制包</h4><p>直接将官方提供的二进制包解压并移动到安装目录即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvf sac-101.6a-linux_x86_64.tar.gz   # 解压</span><br><span class="line">$ sudo mv sac /usr/local                    # 安装</span><br></pre></td></tr></table></figure><h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><h4 id="安装依赖包-1"><a href="#安装依赖包-1" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p>编译源码时需要安装若干软件包。</p><p>对于Ubuntu/Debian系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install build-essential</span><br><span class="line">$ sudo apt-get install libncurses5-dev libsm-dev libice-dev</span><br><span class="line">$ sudo apt-get install libxpm-dev libx11-dev zlib1g-dev</span><br></pre></td></tr></table></figure><p>对于CentOS/Fedora/RHEL系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install gcc gcc-c++ make</span><br><span class="line">$ sudo yum install glibc ncurses-devel libSM-devel libICE-devel</span><br><span class="line">$ sudo yum install libXpm-devel libX11-devel zlib-devel</span><br></pre></td></tr></table></figure><h4 id="编译源码-1"><a href="#编译源码-1" class="headerlink" title="编译源码"></a>编译源码</h4><p>将源码按如下命令解压、配置、编译、安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvf sac-101.6a_source.tar.gz</span><br><span class="line">$ cd sac-101.6a</span><br><span class="line">$ mkdir build</span><br><span class="line">$ cd build</span><br><span class="line">$ ../configure --prefix=/usr/local/sac</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><h3 id="配置变量"><a href="#配置变量" class="headerlink" title="配置变量"></a>配置变量</h3><p>向 <code>~/.bashrc</code> （某些发行版需要修改 <code>~/.bash_profile</code>） 中加入如下语句<br>以配置环境变量和SAC全局变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export SACHOME=/usr/local/sac</span><br><span class="line">export SACAUX=$&#123;SACHOME&#125;/aux</span><br><span class="line">export PATH=$&#123;SACHOME&#125;/bin:$&#123;PATH&#125;</span><br><span class="line"></span><br><span class="line">export SAC_DISPLAY_COPYRIGHT=1</span><br><span class="line">export SAC_PPK_LARGE_CROSSHAIRS=1</span><br><span class="line">export SAC_USE_DATABASE=0</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><code>SACHOME</code> 为SAC的安装目录</li><li><code>SACAUX</code> 目录中包含了SAC运行所需的辅助文件</li><li><code>PATH</code> 为Linux系统环境变量</li><li><code>SAC_DISPLAY_COPYRIGHT</code> 用于控制是否在启动SAC时显示版本和版权<br>信息，一般设置为1。在脚本中多次调用SAC时会重复显示版本和版权信息，<br>干扰脚本的正常输出，因而在脚本中一般将其值设置为0。具体的设置方法<br>可以参考 <a href="/call-in-script">在脚本中调用SAC</a> 中的相关内容</li><li><code>SAC_PPK_LARGE_CROSSHAIRS</code> 用于控制震相拾取过程中光标的大小， 在<br><a href="/data-process/picking-phase.md">震相拾取</a> 时会用到</li><li><code>SAC_USE_DATABASE</code> 用于控制是否允许将SAC格式转换为GSE2.0格式，<br>一般用不到该特性，故而设置其值为0</li></ul><p>修改完 <code>~/.bashrc</code> 后，执行以下命令使配置的环境变量生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="启动SAC"><a href="#启动SAC" class="headerlink" title="启动SAC"></a>启动SAC</h3><p>终端键入小写的 <code>sac</code>，显示 如下则表示SAC安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sac</span><br><span class="line"> SEISMIC ANALYSIS CODE [11/11/2013 (Version 101.6a)]</span><br><span class="line"> Copyright 1995 Regents of the University of California</span><br><span class="line"></span><br><span class="line">SAC&gt;</span><br></pre></td></tr></table></figure><h2 id="在Mac下安装SAC"><a href="#在Mac下安装SAC" class="headerlink" title="在Mac下安装SAC"></a>在Mac下安装SAC</h2><p>本节介绍如何在Mac OS X 如何安装SAC。</p><p>Mac下安装SAC，可以直接使用官方提供的二进制包，也可以手动编译源码包<br>（似乎在最新版本的 macOS 下手动编译的 SAC 无法使用，暂无解决办法）。<br>对于大多数用户而言，建议安装二进制包。下面会分别介绍两种安装方法。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先要安装Mac下的命令行工具。在终端执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure><p>即可。</p><p>此外，还需要安装X11图形界面相关工具，即 XQuartz。可以直接到<br><a href="http://xquartz.macosforge.org/landing/" target="_blank" rel="noopener">XQuartz</a><br>下载dmg安装包并安装。对于 Homebrew 用户，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install xquartz</span><br></pre></td></tr></table></figure><p>安装。</p><h3 id="安装二进制包-2"><a href="#安装二进制包-2" class="headerlink" title="安装二进制包"></a>安装二进制包</h3><p>直接将官方的二进制包解压并移动到安装目录即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvf sac-101.6a-mac_x86_64.tar.gz</span><br><span class="line">$ sudo mv sac /usr/local</span><br></pre></td></tr></table></figure><h3 id="编译源码-2"><a href="#编译源码-2" class="headerlink" title="编译源码"></a>编译源码</h3><p>按照如下命令即可正确编译源码。需要注意的是，由于SAC默认使用的editline库<br>在Mac下无法正常编译，因而执行 <code>configure</code> 时使用了 <code>–enable-readline</code><br>选项使得SAC使用readline库而不是editline库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvf sac-101.6a_source.tar.gz</span><br><span class="line">$ cd sac-101.6a</span><br><span class="line">$ mkdir build</span><br><span class="line">$ cd build</span><br><span class="line">$ ../configure --prefix=/usr/local/sac --enable-readline</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><h3 id="配置变量-1"><a href="#配置变量-1" class="headerlink" title="配置变量"></a>配置变量</h3><p>向 <code>~/.bash_profile</code> 中加入如下语句以配置环境变量和SAC全局变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export SACHOME=/usr/local/sac</span><br><span class="line">export SACAUX=$&#123;SACHOME&#125;/aux</span><br><span class="line">export PATH=$&#123;SACHOME&#125;/bin:$&#123;PATH&#125;</span><br><span class="line"></span><br><span class="line">export SAC_DISPLAY_COPYRIGHT=1</span><br><span class="line">export SAC_PPK_LARGE_CROSSHAIRS=1</span><br><span class="line">export SAC_USE_DATABASE=0</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><code>SACHOME</code> 为SAC的安装目录</li><li><code>SACAUX</code> 目录中包含了SAC运行所需的辅助文件</li><li><code>PATH</code> 为Linux系统环境变量</li><li><code>SAC_DISPLAY_COPYRIGHT</code> 用于控制是否在启动SAC时显示版本和版权<br>信息，一般设置为1。在脚本中多次调用SAC时会重复显示版本和版权信息，<br>干扰脚本的正常输出，因而在脚本中一般将其值设置为0。具体的设置方法<br>可以参考 <a href="/call-in-script">在脚本中调用SAC</a> 中的相关内容</li><li><code>SAC_PPK_LARGE_CROSSHAIRS</code> 用于控制震相拾取过程中光标的大小， 在<br><a href="/data-process/picking-phase.md">震相拾取</a> 时会用到</li><li><code>SAC_USE_DATABASE</code> 用于控制是否允许将SAC格式转换为GSE2.0格式，<br>一般用不到该特性，故而设置其值为0</li></ul><p>修改完 <code>~/.bash_profile</code> 后，执行以下命令使配置的环境变量生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="启动SAC-1"><a href="#启动SAC-1" class="headerlink" title="启动SAC"></a>启动SAC</h3><p>终端键入小写的 <code>sac</code>，显示如下则表示SAC安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sac</span><br><span class="line"> SEISMIC ANALYSIS CODE [11/11/2013 (Version 101.6a)]</span><br><span class="line"> Copyright 1995 Regents of the University of California</span><br><span class="line"></span><br><span class="line">SAC&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SAC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ObsPy</title>
      <link href="/awesome-installation/posts/obspy.html"/>
      <content type="html"><![CDATA[<p>本文源于<a href="https://github.com/SeisPider/" target="_blank" rel="noopener">SeisPider</a>开源项目<a href="https://github.com/SeisPider/SeisPider.top.posts" target="_blank" rel="noopener">SeisPider.top.posts</a>。旨在利用Anaconda,Pyenv安装ObsPy。</p><h2 id="ObsPy安装"><a href="#ObsPy安装" class="headerlink" title="ObsPy安装"></a>ObsPy安装</h2><p>Pyenv 是一款Python多版本管理工具。它利用Python解释器基于site的特点，将多版本Python分别安装在不同文件夹下，从而实现多版本Python管理。其提供了一系列命令对Python运行环境进行管理。本人笔记本运行环境为CentOS 7 并安装<a href="http://seisman.info/python-pyenv.html" target="_blank" rel="noopener">Pyenv</a>管理多版本Python。</p><p>Anaconda是一个专供科研使用的Python发行包，其中集合了所有重要的Python科学计算模块及其相关依赖。Anaconda是<strong>独立于现有系统</strong>进行安装的。因此，用户无需担心安装破坏当前的Python环境。</p><p><strong>Anaconda的安装并不要求用户具备管理员权限</strong></p><ul><li><a href="https://www.continuum.io/downloads" target="_blank" rel="noopener">Anaconda</a>安装</li><li>将<code>conda-forge</code>和<code>obspy</code>通道加入你的Anaconda配置中:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ conda config --add channels conda-forge</span><br><span class="line">$ conda config --add channels obspy</span><br></pre></td></tr></table></figure></li><li>安装已在Anaconda云库中预编译过的ObsPy版本:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda install obspy</span><br></pre></td></tr></table></figure></li></ul><p><strong><code>Tips</code></strong>：</p><ul><li>Anaconda安装仅需要以你所用的<code>shell</code>执行安装脚本即可，最后需要用户确认是否将Anaconda加入环境变量，默认的是加入至.bashrc中。若用户使用的是zsh则需要选择<code>No</code>并在.zshrc末尾加上<code>export PATH=&quot;$HOME/anaconda2/bin:$PATH&quot;</code>anaconda2为用户安装路径。其他版本shell同理</li><li>安装Anaconda过程中出现任何问题请参考<a href="http://conda.pydata.org/docs/troubleshooting.html" target="_blank" rel="noopener"><code>Troubleshooting</code></a></li><li>安装Anaconda3后无法通过<code>conda</code>安装<code>Obspy</code>的用户，请直接使用<code>pip install obspy</code>安装。</li></ul><h2 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda update obspy</span><br></pre></td></tr></table></figure><p>若用户并未将<code>conda-forge</code>添加为默认通道，则执行如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda update -c conda-forge obspy</span><br></pre></td></tr></table></figure><br>若用户不进行版本控制可直接前往检验ObsPy安装：<strong><a href="#jump">检验安装</a></strong></p><p><strong>建议用户优先采用Anaconda的管理工具<code>conda</code>安装所需安装包</strong><br>用户可通过<code>conda search &lt;package&gt;</code>搜索所需安装包，若显示conda-forge中无该软件的预编译版本则考虑<code>anaconda search -t conda &lt;package_name&gt;</code>查看默认通道外的通道是否存在该安装包。最后再考虑使用<code>pip</code>等安装工具。</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>ObsPy依赖于一系列的Python科学计算模块，当各个模块进行版本更新后可能造成ObsPy无法使用。因此，用户可以考虑固定ObsPy及其依赖模块的版本，避免模块升级。</p><h3 id="ObsPy-0-10-2的版本控制示例"><a href="#ObsPy-0-10-2的版本控制示例" class="headerlink" title="ObsPy 0.10.2的版本控制示例"></a>ObsPy 0.10.2的版本控制示例</h3><p>本示例假定用户使用Python2并期望使用ObsPy0.10.2的情况。</p><ul><li>添加obspy 的通道<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda config --add channels obspy</span><br></pre></td></tr></table></figure></li><li><p>创造一个以”obspy0.10”为名的相对独立的运行环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ conda create -n obspy0.10 python=2.7</span><br><span class="line">Fetching package metadata: ........</span><br><span class="line">Solving package specifications: ...........</span><br><span class="line"></span><br><span class="line">Package plan for installation in environment /home/megies/anaconda/envs/obspy0.10:</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">    openssl:    1.0.2g-0     </span><br><span class="line">    pip:        8.1.1-py27_0</span><br><span class="line">    python:     2.7.11-0     </span><br><span class="line">    readline:   6.2-2        </span><br><span class="line">    setuptools: 20.3-py27_0  </span><br><span class="line">    sqlite:     3.9.2-0      </span><br><span class="line">    tk:         8.5.18-0     </span><br><span class="line">    wheel:      0.29.0-py27_0</span><br><span class="line">    zlib:       1.2.8-0      </span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? y</span><br><span class="line"></span><br><span class="line">Extracting packages ...</span><br><span class="line">[      COMPLETE      ]|######################################| 100%</span><br><span class="line">Linking packages ...</span><br><span class="line">[      COMPLETE      ]|######################################| 100%</span><br><span class="line">#</span><br><span class="line"># To activate this environment, use:</span><br><span class="line"># $ source activate obspy0.10</span><br><span class="line">#</span><br><span class="line"># To deactivate this environment, use:</span><br><span class="line"># $ source deactivate</span><br><span class="line">#</span><br></pre></td></tr></table></figure></li><li><p>在当前终端激活obspy0.10的运行环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ source activate obspy0.10</span><br><span class="line">discarding /path/to/anaconda/bin from PATH</span><br><span class="line">prepending /path/to/anaconda/envs/obspy0.10/bin to PATH</span><br><span class="line">(obspy0.10)$ which python  # just to illustrate which python is in use now</span><br><span class="line">/path/to/anaconda/envs/obspy0.10/bin/python</span><br></pre></td></tr></table></figure></li><li><p>为固定环境配置安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># contents of /path/to/anaconda/envs/obspy0.10/conda-meta/pinned:</span><br><span class="line">python 2.7.*</span><br><span class="line">numpy 1.10.*</span><br><span class="line">matplotlib 1.5.*</span><br><span class="line">basemap 1.0.*</span><br><span class="line">obspy 0.10.*</span><br></pre></td></tr></table></figure></li><li><p>安装obspy及其依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">(obspy0.10)$ conda install obspy</span><br><span class="line">Fetching package metadata: ........</span><br><span class="line">Solving package specifications: ...........</span><br><span class="line"></span><br><span class="line">Package plan for installation in environment /home/megies/anaconda/envs/obspy0.10:</span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    libgfortran-3.0            |                0         261 KB</span><br><span class="line">    future-0.15.2              |           py27_0         616 KB</span><br><span class="line">    numpy-1.9.3                |           py27_2         5.7 MB</span><br><span class="line">    pytz-2016.2                |           py27_0         176 KB</span><br><span class="line">    lxml-3.6.0                 |           py27_0         2.8 MB</span><br><span class="line">    python-dateutil-2.5.1      |           py27_0         235 KB</span><br><span class="line">    scipy-0.17.0               |       np19py27_2        29.9 MB</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:        39.7 MB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">    basemap:         1.0.7-np19py27_0</span><br><span class="line">    cairo:           1.12.18-6        </span><br><span class="line">    flake8:          2.5.1-py27_0     </span><br><span class="line">    fontconfig:      2.11.1-5         </span><br><span class="line">    freetype:        2.5.5-0          </span><br><span class="line">    funcsigs:        0.4-py27_0       </span><br><span class="line">    future:          0.15.2-py27_0    </span><br><span class="line">    geos:            3.3.3-0          </span><br><span class="line">    libgfortran:     3.0-0            </span><br><span class="line">    libpng:          1.6.17-0         </span><br><span class="line">    libxml2:         2.9.2-0          </span><br><span class="line">    libxslt:         1.1.28-0         </span><br><span class="line">    lxml:            3.6.0-py27_0     </span><br><span class="line">    matplotlib:      1.4.3-np19py27_2</span><br><span class="line">    mccabe:          0.3.1-py27_0     </span><br><span class="line">    mkl:             11.3.1-0         </span><br><span class="line">    mock:            1.3.0-py27_0     </span><br><span class="line">    numpy:           1.9.3-py27_2     </span><br><span class="line">    obspy:           0.10.2-np19py27_0</span><br><span class="line">    pbr:             1.3.0-py27_0     </span><br><span class="line">    pep8:            1.7.0-py27_0     </span><br><span class="line">    pixman:          0.32.6-0         </span><br><span class="line">    py2cairo:        1.10.0-py27_2    </span><br><span class="line">    pyflakes:        1.1.0-py27_0     </span><br><span class="line">    pyparsing:       2.0.3-py27_0     </span><br><span class="line">    pyqt:            4.11.4-py27_1    </span><br><span class="line">    python-dateutil: 2.5.1-py27_0     </span><br><span class="line">    pytz:            2016.2-py27_0    </span><br><span class="line">    qt:              4.8.7-1          </span><br><span class="line">    scipy:           0.17.0-np19py27_2</span><br><span class="line">    sip:             4.16.9-py27_0    </span><br><span class="line">    six:             1.10.0-py27_0    </span><br><span class="line">    sqlalchemy:      1.0.12-py27_0    </span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)?</span><br><span class="line"></span><br><span class="line">Fetching packages ...</span><br><span class="line">libgfortran-3. 100% |######################################| Time: 0:00:00 442.02 kB/s</span><br><span class="line">future-0.15.2- 100% |######################################| Time: 0:00:00 756.18 kB/s</span><br><span class="line">numpy-1.9.3-py 100% |######################################| Time: 0:00:04   1.40 MB/s</span><br><span class="line">pytz-2016.2-py 100% |######################################| Time: 0:00:00 356.89 kB/s</span><br><span class="line">lxml-3.6.0-py2 100% |######################################| Time: 0:00:03 793.42 kB/s</span><br><span class="line">python-dateuti 100% |######################################| Time: 0:00:00 473.91 kB/s</span><br><span class="line">scipy-0.17.0-n 100% |######################################| Time: 0:00:20   1.54 MB/s</span><br><span class="line">Extracting packages ...</span><br><span class="line">[      COMPLETE      ]|######################################| 100%</span><br><span class="line">Linking packages ...</span><br><span class="line">[      COMPLETE      ]|######################################| 100%</span><br></pre></td></tr></table></figure></li><li><p>完成</p></li></ul><h2 id="检验安装结果"><a href="#检验安装结果" class="headerlink" title="检验安装结果"></a>检验安装结果</h2><p><span id="jump">运行如下代码：</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ obspy-runtests</span><br></pre></td></tr></table></figure></p><p><code>Tips:</code></p><ul><li>可根据报错安装相应依赖。例：本机显示缺少mock module。使用<code>conda install mock</code>安装相应依赖。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://github.com/obspy/obspy/wiki/Installation-via-Anaconda" target="_blank" rel="noopener">installation via anaconda</a></li><li><a href="https://www.continuum.io/downloads" target="_blank" rel="noopener">installation of anaconda</a></li><li><a href="https://github.com/yyuu/pyenv#basic-github-checkout" target="_blank" rel="noopener">installation of pyenv</a></li><li><a href="https://anaconda.org/obspy/obspy" target="_blank" rel="noopener">obspy package in anaconda cloud</a></li><li><a href="http://conda.pydata.org/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting of anaconda</a></li></ul><h2 id="修改历史"><a href="#修改历史" class="headerlink" title="修改历史"></a>修改历史</h2><ul><li>2017-01-06：初稿并翻译”ObsPy通过Anaconda安装”指南</li></ul>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ObsPy </tag>
            
            <tag> Anaconda </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Madagascar</title>
      <link href="/awesome-installation/posts/Madagascar.html"/>
      <content type="html"><![CDATA[<p>与Seismic Unix类似，Madagascar也是一款地震数据处理软件，其开发者众多，内置的软件也非常多，<br>缺点就是代码注释比较少，不容易懂。给的示例虽多，但也不容易懂，对于初学者而言十分困难。</p><p>下载最新的Release版本：<a href="http://github.com/ahay/src.git" target="_blank" rel="noopener">http://github.com/ahay/src.git</a></p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 必须安装的依赖包</span><br><span class="line">$ sudo apt-get install libxaw7-dev</span><br><span class="line"># 建议安装的依赖包</span><br><span class="line">$ sudo apt-get install freeglut3-dev</span><br><span class="line">$ sudo apt-get install libnetpbm10-dev</span><br><span class="line">$ sudo apt-get install libgd-dev  </span><br><span class="line">$ sudo apt-get install libplplot-dev</span><br><span class="line">$ sudo apt-get install libavcodec-dev</span><br><span class="line">$ sudo apt-get install libcairo2-dev</span><br><span class="line">$ sudo apt-get install libjpeg-dev</span><br><span class="line">$ sudo apt-get install swig</span><br><span class="line">$ sudo apt-get install python-dev</span><br><span class="line">$ sudo apt-get install python-numpy</span><br><span class="line">$ sudo apt-get install g++</span><br><span class="line">$ sudo apt-get install gfortran</span><br><span class="line">$ sudo apt-get install libopenmpi-dev</span><br><span class="line">$ sudo apt-get install libfftw3-dev</span><br><span class="line">$ sudo apt-get install libsuitesparse-dev</span><br><span class="line"># 不建议安装的包</span><br><span class="line">$ sudo apt-get install python-epydoc</span><br></pre></td></tr></table></figure><h2 id="编译，安装"><a href="#编译，安装" class="headerlink" title="编译，安装"></a>编译，安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/ahay/src.git madagascar-2.0</span><br><span class="line">$ cd madagascar-2.0</span><br><span class="line">$ sudo ./configure API=c++,f90 --prefix=/opt/rsf2.0 # 额外安装C++，Fortran两个API</span><br><span class="line">$ sudo make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>向<code>~/.bashrc</code>中加入如下语句以配置环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Madagascar 2.0</span><br><span class="line">export RSFROOT=/opt/rsf2.0</span><br><span class="line">source $RSFROOT/share/madagascar/etc/env.sh</span><br></pre></td></tr></table></figure><ul><li>2016-05-22: 初稿；</li><li>2017-07-18: 更新至madagascar2.0</li></ul>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSF </tag>
            
            <tag> Madagascar </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GMT</title>
      <link href="/awesome-installation/posts/GMT.html"/>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文源于<a href="http://seisman.info/" target="_blank" rel="noopener">SeisMan</a>开源项目<a href="https://github.com/gmt-china/GMT_docs" target="_blank" rel="noopener">GMT_docs</a></p><h2 id="Linux-下安装GMT"><a href="#Linux-下安装GMT" class="headerlink" title="Linux 下安装GMT"></a>Linux 下安装GMT</h2><p></p><h3 id="安装预编译版">安装预编译版</h3><p></p><p>大多数 Linux 发行版都可以通过系统自带的软件包管理器直接安装 GMT。但通常系统软件 源里自带的 GMT 版本都比较老，因而如果可能，还是建议 Linux 用户手动编译安装。</p><br><p>CentOS 7 用户:</p><br><pre><code>sudo yum install epel-release<br>sudo yum install GMT GMT-devel GMT-doc<br>sudo yum install dcw-gmt gshhg-gmt-nc4 gshhg-gmt-nc4-full gshhg-gmt-nc4-high</code></pre><br><p>Ubuntu 用户:</p><br><pre><code>sudo apt-get install gmt gmt-dcw gmt-gshhg</code></pre><br><p>其他发行版用户可以到 <a href="https://pkgs.org/" class="uri" target="_blank" rel="noopener">https://pkgs.org/</a> 查询自己的 Linux 发行版软件源中是否包含 GMT 以及 GMT 的具体版本。</p><br><h3 id="使用社区提供的快速安装脚本">使用社区提供的快速安装脚本</h3><br><p>GMT 中文社区为常见的 Linux 发行版提供了 GMT 最新版本的安装脚本，见 <a href="https://github.com/gmt-china/gmt-easy-installer" class="uri" target="_blank" rel="noopener">https://github.com/gmt-china/gmt-easy-installer</a>。</p><br><p>用户需要下载两个安装脚本：</p><br><ol style="list-style-type: decimal"><br><li>自己的发行版对应的安装脚本，比如 <code>ubuntu-installer.sh</code>， 用于安装 GMT 所需的依赖</li><br><li>GMT安装脚本 <code>GMT-installer.sh</code> 用于编译安装GMT源码</li><br></ol><br><p>并依次执行 <code>ubuntu-installer.sh</code> 和 <code>GMT-installer.sh</code> 即可。</p><br><h3 id="从源码编译">从源码编译</h3><br><p>为了使用最新版本的 GMT，建议用户从源码编译 GMT。</p><br><h4 id="解决依赖关系">解决依赖关系</h4><br><p>GMT 主要依赖于 cmake（&gt;=2.8.5）、fftw（&gt;=3.3）、glib2（&gt;=2.32）、 netCDF（&gt;4.0且支持netCDF-4/HDF5）、ghostscript等。</p><br><blockquote><br><p><strong>warning</strong></p><br><p>由于 Linux 发行版众多，以下仅所列仅供参考，请自行确认自己的发行版上软件包的 具体名字。</p><br></blockquote><br><p>对于Ubuntu/Debian:</p><br><pre><code># 更新<br>$ sudo apt-get update<br><br># 必须安装的包<br>$ sudo apt-get install gcc g++ cmake make libc6<br>$ sudo apt-get install ghostscript<br>$ sudo apt-get install libnetcdf-dev<br><br># 可选包(即便安装不成功也不影响 GMT 的使用)<br>$ sudo apt-get install libgdal-dev python-gdal<br>$ sudo apt-get install liblapack3<br>$ sudo apt-get install libglib2.0-dev<br>$ sudo apt-get install libpcre3-dev<br>$ sudo apt-get install libfftw3-dev</code></pre><br><p>对于CentOS/RHEL/Fedora:</p><br><pre><code>$ sudo yum install epel-release  # CentOS用户必须先安装epel-release<br># 必须安装的包<br>$ sudo yum install gcc gcc-c++ cmake make glibc<br>$ sudo yum install ghostscript<br>$ sudo yum install netcdf-devel<br><br># 可选包<br>$ sudo yum install gdal-devel gdal-python<br>$ sudo yum install lapack64-devel lapack-devel<br>$ sudo yum install glib2-devel<br>$ sudo yum install pcre-devel<br>$ sudo yum install fftw-devel</code></pre><br><p>确认 netCDF 支持 netCDF-4/HDF5 格式:</p><br><pre><code>$ nc-config –has-nc4<br>yes</code></pre><br><p>若输出为 <code>yes</code> 则可正常安装 GMT，否则无法正常安装。</p><br><h4 id="下载">下载</h4><br><p>Linux安装GMT需要下载三个文件（这里提供的国内下载源）：</p><br><ol><br><li>GMT源码： <a href="http://mirrors.ustc.edu.cn/gmt/gmt-5.4.2-src.tar.gz" class="uri" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/gmt/gmt-5.4.2-src.tar.gz</a></li><br><li>全球海岸线数据GSHHG： <a href="http://mirrors.ustc.edu.cn/gmt/gshhg-gmt-2.3.7.tar.gz" class="uri" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/gmt/gshhg-gmt-2.3.7.tar.gz</a></li><br><li>全球数字图表DCW： <a href="http://mirrors.ustc.edu.cn/gmt/dcw-gmt-1.1.2.tar.gz" class="uri" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/gmt/dcw-gmt-1.1.2.tar.gz</a></li><br></ol><br><h4 id="安装gmt">安装GMT</h4><br><p>将下载的三个压缩文件放在同一个目录里，按照如下步骤进行安装：</p><br><div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co"># 解压三个压缩文件</span><br>$ <span class="kw">tar</span> -xvf gmt-5.4.2-src.tar.gz<br>$ <span class="kw">tar</span> -xvf gshhg-gmt-2.3.7.tar.gz<br>$ <span class="kw">tar</span> -xvf dcw-gmt-1.1.2.tar.gz<br><br><span class="co"># 将gshhg和dcw数据复制到gmt的share目录下</span><br>$ <span class="kw">mv</span> gshhg-gmt-2.3.7 gmt-5.4.2/share/gshhg<br>$ <span class="kw">mv</span> dcw-gmt-1.1.2 gmt-5.4.2/share/dcw-gmt<br><br><span class="co"># 切换到gmt源码目录下</span><br>$ <span class="kw">cd</span> gmt-5.4.2<br><br><span class="co"># 新建用户配置文件</span><br>$ <span class="kw">gedit</span> cmake/ConfigUser.cmake</code></pre></div><br><p>向 <code>cmake/ConfigUser.cmake</code> 文件中加入如下语句:</p><br><pre><code>set (CMAKE_INSTALL_PREFIX &quot;/opt/GMT-5.4.2&quot;)<br>set (GMT_INSTALL_MODULE_LINKS FALSE)<br>set (COPY_GSHHG TRUE)<br>set (COPY_DCW TRUE)<br>set (GMT_USE_THREADS TRUE)</code></pre><br><ul><br><li><code>CMAKE_INSTALL_PREFIX</code> 设置GMT的安装路径，可以修改为其他路径。对于没有 root 权限的用户，可以将安装路径设置为 <code>/home/xxx/software/GMT-5.4.2</code> 等有可读写 权限的路径；</li><br><li><code>GMT_INSTALL_MODULE_LINKS</code> 为FALSE，表明不在GMT的bin目录下建立命令的软链接， 也可设置为TRUE</li><br><li><code>COPY_GSHHG</code> 为TRUE会将GSHHG数据复制到 <code>GMT/share/coast</code> 下</li><br><li><code>COPY_DCW</code> 为TRUE会将DCW数据复制到 <code>GMT/share/dcw</code> 下</li><br><li><code>GMT_USE_THREADS</code> 表示是否开启某些模块的并行功能</li><br></ul><br><blockquote><br><p><strong>tip</strong></p><br><p>此处为了便于一般用户理解，只向 <code>cmake/ConfigUser.cmake</code> 中写入了必要的5行语句。</p><br><p>对于高级用户而言，可以直接在 GMT 提供的配置模板基础上进行更多配置。将 <code>cmake/ConfigUserTemplate.cmake</code> 复制为 <code>cmake/ConfigUser.cmake</code> ， 然后根据配置文件中的大量注释说明信息自行修改配置文件。</p><br></blockquote><br><p>继续执行如下命令以检查GMT的依赖关系:</p><br><pre><code># 注意，此处新建的 build 文件夹位于 gmt-5.4.2 目录下，不是 gmt-5.4.1/cmake 目录下<br>$ mkdir build<br>$ cd build/<br>$ cmake ..</code></pre><br><p><code>cmake ..</code> 会检查GMT对软件的依赖关系，我的检查结果如下:</p><br><pre><code><em>  Options:</em>  Found GSHHG database       : /home/user/GMT/gmt-5.4.2/share/gshhg (2.3.7)<br><em>  Found DCW-GMT database     : /home/user/GMT/gmt-5.4.2/share/dcw-gmt</em>  NetCDF library             : /usr/lib64/libnetcdf.so<br><em>  NetCDF include dir         : /usr/include</em>  GDAL library               : /usr/lib64/libgdal.so<br><em>  GDAL include dir           : /usr/include/gdal</em>  FFTW library               : /usr/lib64/libfftw3f.so<br><em>  FFTW include dir           : /usr/include</em>  Accelerate Framework       :<br><em>  Regex support              : PCRE (/usr/lib64/libpcre.so)</em>  ZLIB library               : /usr/lib64/libz.so<br><em>  ZLIB include dir           : /usr/include</em>  LAPACK library             : yes<br><em>  License restriction        : no</em>  Triangulation method       : Shewchuk<br><em>  OpenMP support             : enabled</em>  GLIB GTHREAD support       : enabled<br><em>  PTHREAD support            : enabled</em>  Build mode                 : shared<br><em>  Build GMT core             : always [libgmt.so]</em>  Build PSL library          : always [libpostscriptlight.so]<br><em>  Build GMT supplements      : yes [supplements.so]</em>  Build GMT Developer        : yes<br><em>  Build proto supplements    : none</em><br><em>  Locations:</em>  Installing GMT in          : /opt/GMT-5.4.2<br><em>  GMT_DATADIR                : /opt/GMT-5.4.2/share</em>  GMT_DOCDIR                 : /opt/GMT-5.4.2/share/doc<br>*  GMT_MANDIR                 : /opt/GMT-5.4.2/share/man<br>– Configuring done<br>– Generating done</code></pre><br><p>正常情况下的检查结果应该与上面给出的类似。若出现问题，则需要检查之前的步骤是否 有误，检查完毕后重新执行 <code>cmake ..</code> ，直到出现类似的检查结果。检查完毕后， 开始编译和安装:</p><br><pre><code>$ make<br>$ sudo make install</code></pre><br><blockquote><br><p><strong>note</strong></p><br><p>对于多核计算机，可以使用如下命令实现并行编译以减少编译时间:</p><br><pre><code>$ make -j<br>$ sudo make -j install</code></pre><br><p>但并行编译可能在个别发行版上无法使用。</p><br></blockquote><br><h4 id="修改环境变量">修改环境变量</h4><br><p>修改环境变量并使其生效：</p><br><div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">echo</span> <span class="st">&#39;export GMT5HOME=/opt/GMT-5.4.2&#39;</span> <span class="kw">&gt;&gt;</span> ~/.bashrc<br>$ <span class="kw">echo</span> <span class="st">&#39;export PATH=${GMT5HOME}/bin:$PATH&#39;</span> <span class="kw">&gt;&gt;</span> ~/.bashrc<br>$ <span class="kw">echo</span> <span class="st">&#39;export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${GMT5HOME}/lib64&#39;</span> <span class="kw">&gt;&gt;</span> ~/.bashrc<br>$ <span class="kw">exec</span> <span class="ot">$SHELL</span> -l</code></pre></div><br><h4 id="测试是否安装成功">测试是否安装成功</h4><br><p>在终端键入 <code>gmt</code> ，若出现如下输出，则安装成功:</p><br><pre><code>$ gmt –version<br>5.4.2</code></pre><br><br><br><h2 id="macos-下安装-gmt">macOS 下安装 GMT</h2><br><p>macOS 下 GMT 的安装方法有很多，可以直接使用安装包，也可以使用各种软件管理工具。</p><br><p>推荐使用 homebrew 方式安装。</p><br><h3 id="使用-homebrew-安装">使用 homebrew 安装</h3><br><p><a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 是 macOS 下的第三方软件包管理工具。</p><br><ol style="list-style-type: decimal"><br><li><p>安装 Homebrew:</p><br><pre><code>$ /usr/bin/ruby -e &quot;$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot</a>;</code></pre></li><br><li><p>安装 GMT:</p><br><pre><code>$ brew update &amp;&amp; brew upgrade<br>$ brew tap homebrew/science<br>$ brew install gmt</code></pre></li><br><li><p>测试安装是否成功:</p><br><pre><code>$ gmt –version<br>5.4.2</code></pre></li><br><li><p>如果你想要同时安装 GMT4 和 GMT5:</p><br><pre><code>$ brew unlink gmt &amp;&amp; brew install gmt4</code></pre></li><br><li><p>从 GMT5 切换至 GMT4:</p><br><pre><code>$ brew unlink gmt &amp;&amp; brew link gmt4</code></pre><br><p>从 GMT4 切换至 GMT5:</p><br><pre><code>$ brew unlink gmt4 &amp;&amp; brew link gmt5</code></pre></li><br></ol><br><blockquote><br><p><strong>warning</strong></p><br><p>以下几种安装方法翻译自官方文档，我们未作验证。</p><br></blockquote><br><h3 id="使用-gmt-安装包">使用 GMT 安装包</h3><br><p>GMT 为 macOS 用户提供了 dmg 安装包。</p><br><ol style="list-style-type: decimal"><br><li>到社区主页的 <a href="http://gmt-china.org/download/" target="_blank" rel="noopener">下载页面</a> 下载最新版本的 dmg 安装包。</li><br><li>双击 dmg 包以解压，将解压得到的 <code>GMT-5.4.2.app</code> 拖动到 Applications 目录即可。</li><br><li><p>GMT 默认会安装到 <code>/Applications/GMT-5.4.2.app/</code> 目录下，将如下语句:</p><br><pre><code>export PATH=${PATH}:/Applications/GMT-5.4.2.app/Contents/Resources/bin</code></pre><br><p>加入到 <code>~/.bashrc</code> 中即可。</p></li><br><li><p>测试安装是否成功:</p><br><pre><code>$ gmt –version<br>5.4.2</code></pre></li><br></ol><br><h3 id="使用-macports-安装">使用 macports 安装</h3><br><pre><code>sudo port install gdal +curl +geos +hdf5 +netcdf +fftw3 +openmp<br>sudo port install gmt5</code></pre><br><h3 id="使用fink安装">使用fink安装</h3><br><pre><code>sudo fink install gmt5</code></pre><br><br><h2 id="windows-下安装-gmt">Windows 下安装 GMT</h2><br><p>GMT 最初是在类 Unix 系统上开发的，尽管已经移植到了 Windows 上，但还是建议尽可能在类 Unix 系统上使用。</p><br><p>在 Windows 下使用 GMT 有如下几种途径：</p><br><ol><br><li>使用 GMT 提供的 Windows 安装包</li><br><li>在 <a href="https://www.cygwin.com/" target="_blank" rel="noopener">cygwin</a> 中安装 GMT</li><br><li>在 <a href="http://msys2.github.io/" target="_blank" rel="noopener">MSYS2</a> 中安装 GMT</li><br><li>在 <a href="https://mingw-w64.org/doku.php" target="_blank" rel="noopener">MinGW-w64</a> 中安装GMT</li><br><li>使用 Windows 10 提供的 Bash on Ubuntu on Windows</li><br></ol><br><h3 id="windows下的gmt安装包">Windows下的GMT安装包</h3><br><p>GMT 为 Windows 用户提供了安装包，可以直接安装使用。Windows 下需要安装 GMT、ghostscript 和 gsview。</p><br><blockquote><br><p><strong>warning</strong></p><br><p>从 GMT 5.2.1 开始，GMT 提供的 Windows 下的安装包已经不再支持 Windows XP。</p><br></blockquote><br><ol style="list-style-type: decimal"><br><li><p>下载</p><br><p>到社区主页的 <a href="http://gmt-china.org/download/" target="_blank" rel="noopener">下载页面</a> 下载所需要的安装包。</p></li><br><li><p>安装GMT</p><br><p>直接双击安装包即可安装，直接点击下一步，使用默认的选项即可，无须做任何修改。在“选择组件”页面， 建议将四个选项都勾选上，然后点击下一步安装完成。</p><br><blockquote><br><p><strong>note</strong></p><br><p>安装过程中可能会出现“Warning! PATH too long installer unable to modify PATH!”的警告。 出现此警告的原因是系统的环境变量 <code>PATH</code> 太长，GMT安装包无法直接修改。</p><br><p>解决办法是，先忽略这一警告，待安装完成后按照如下步骤自行修改系统环境变量 <code>PATH</code> 。</p><br><ol style="list-style-type: decimal"><br><li>点击“计算机”-&gt;“属性”-&gt;“高级系统设置”-&gt;“环境变量”打开“环境变量”编辑工具</li><br><li>在“系统变量”部分中，选中“Path”并点击“编辑”</li><br><li>在“变量值”的最后加上GMT的安装路径。需要注意“path”变量值中多个路径之间用英文分号分隔</li><br></ol><br></blockquote><br><p>安装完成后，“开始”-&gt;“所有程序”-&gt;“附件”-&gt;“命令提示符”以启动cmd。在cmd窗口中执行:</p><br><pre><code>C:\Users\xxxx&gt; gmt –version<br>5.4.2</code></pre><br><p>即表示安装成功。</p></li><br><li><p>安装ghostscript</p><br><p>安装的过程没什么可说的，在最后一步，记得勾选“Generate cidfmap for Windows CJK TrueType fonts”。</p></li><br><li><p>安装gsview</p><br><p>双击直接安装即可。</p></li><br><li><p>安装 UnixTools</p><br><p>解压压缩包，并将解压得到的 exe 文件移动到 GMT 的 bin 目录即可。</p></li><br></ol><br><h3 id="在-cygwin-中安装">在 cygwin 中安装</h3><br><p>欢迎补充，请参考：</p><br><ol><br><li><a href="http://gmt.soest.hawaii.edu/doc/5.4.2/GMT_Docs.html#cygwin-and-gmt" class="uri" target="_blank" rel="noopener">http://gmt.soest.hawaii.edu/doc/5.4.2/GMT_Docs.html#cygwin-and-gmt</a></li><br><li><a href="http://gmt.soest.hawaii.edu/projects/gmt/wiki/BuildingGMT#Cygwin" class="uri" target="_blank" rel="noopener">http://gmt.soest.hawaii.edu/projects/gmt/wiki/BuildingGMT#Cygwin</a></li><br></ol><br><h3 id="在-msys2-中安装">在 MSYS2 中安装</h3><br><ol style="list-style-type: decimal"><br><li>下载并安装 <a href="http://msys2.github.io/" target="_blank" rel="noopener">MSYS2</a></li><br></ol><br><p>欢迎补充</p><br><h3 id="在-mingw-w64-中安装">在 MinGW-w64 中安装</h3><br><p>欢迎补充</p><br><h3 id="bash-on-ubuntu-on-windows">Bash on Ubuntu on Windows</h3><br><p>欢迎补充</p>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GMT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DENISE</title>
      <link href="/awesome-installation/posts/denise.html"/>
      <content type="html"><![CDATA[<p>DENISE是一个KIT开发的用于全波形反演的软件。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载,需要上下面的网站去预留信息，然后开发者会在几小时内将软件发至你留的邮箱中。</p><p>官网：<a href="http://www.gpi.kit.edu/Software-FWI.php" target="_blank" rel="noopener">http://www.gpi.kit.edu/Software-FWI.php</a></p><p>安装DENISE的过程十分简单，开发者把脚本都写好了，只需要运行一下代码就可以编译成功了。</p><h2 id="编译manual手册"><a href="#编译manual手册" class="headerlink" title="编译manual手册"></a>编译manual手册</h2><p>将下载的软件解压后，进入doc/目录下，运行<code>compile_LaTeX_manual.sh</code>编译manual文档，里边有一部分关于安装的说明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./compile_LaTeX_manual.sh</span><br></pre></td></tr></table></figure><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p>安装依赖包文件需要进入par/目录下运行make，即可成功安装四个依赖包cseife，stfinv，aff，fourier.并编译整个软件包，这一点与根目录下的INSTALL文件不同，原INSTALL文件中说的compileLIBRARIES.sh在par/目录下根本不存在，因此整个编译过程应参考manual文档</p><h3 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h3><p>由于源码含F77代码，需要指定F77的编译器，在contrib/下的<code>Makefile_var</code>文件中指定。可根据自己系统的f77编译器确定。笔者使用的gfortran.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># edit /DENISE-Release/contrib/Makefile_var</span><br><span class="line">FC=/usr/local/gfortran</span><br></pre></td></tr></table></figure><p>修改完成之后，回到par/目下执行make即可编译整个程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DENISE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CPS330</title>
      <link href="/awesome-installation/posts/CPS330.html"/>
      <content type="html"><![CDATA[<p>CPS330 全称 Computer Programs in Seismology，是圣路易斯大学地震中心开发并维护的<br>一款地震学软件包，其主要关注地震波在地壳和上地幔介质中的传播和解释。</p><p>本文(源自<a href="http://seisman.info/install-texlive-under-linux.html" target="_blank" rel="noopener">SeisMan</a>)介绍如何在 Linux 系统下编译安装 CPS330。</p><a id="more"></a><h2 id="申请："><a href="#申请：" class="headerlink" title="申请："></a>申请：</h2><p>申请链接: <a href="http://www.eas.slu.edu/eqc/eqccps.html" target="_blank" rel="noopener">http://www.eas.slu.edu/eqc/eqccps.html</a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压:"></a>解压:</h2><pre><code>$ tar -xvf NP330.Jun-11-2014.tgz$ cd PROGRAMS.330</code></pre><h2 id="确认当前系统是-32-还是-64-位："><a href="#确认当前系统是-32-还是-64-位：" class="headerlink" title="确认当前系统是 32 还是 64 位："></a>确认当前系统是 32 还是 64 位：</h2><p>执行 <code>uname -a</code> ，若输出中包含 <code>x86_64</code> 则是 64 位，若输出包含类似<br><code>i686</code> 则为 32 位。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>如果是 32 位系统则:</p><pre><code>$ ./Setup LINUX40</code></pre><p>如果是 64 位系统则:</p><pre><code>$ ./Setup LINUX6440</code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译:"></a>编译:</h2><pre><code>$ ./C</code></pre><p>接下来会编译一段时间，最终在 bin 目录下应该生成 149 个可执行文件。当然，<br>不同版本可能可执行文件的数目有差异。</p><h2 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h2><p>向 <code>~/.bashrc</code> 文件中添加如下语句:</p><pre><code>export PATH=/path/to/PROGRAMS.330/bin:${PATH}</code></pre><p>保存后，重启终端即可。</p><p>说明：编译时使用 <code>gcc</code> 和 <code>gfortran</code> 编译器。<code>g77</code> 已经是很老旧的版本了，稍微新的<br>Linux 发行版中都不再提供了，因而不推荐使用。</p><p>备注： <a href="http://www.eas.slu.edu/eqc/eqc_cps/Download/" target="_blank" rel="noopener">http://www.eas.slu.edu/eqc/eqc_cps/Download/</a></p>]]></content>
      
      <categories>
          
          <category> 地震学软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TeXLive</title>
      <link href="/awesome-installation/posts/texlive.html"/>
      <content type="html"><![CDATA[<p>本文源于<a href="http://seisman.info/install-texlive-under-linux.html" target="_blank" rel="noopener">SeisMan</a>,介绍如何在 Linux 下安装 TeXLive 2017。</p><a id="more"></a><h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><ul><li>安装过程中需要调用 Perl 的模块 <code>Digest::MD5</code> 来检测 ISO 文件的完整性；</li><li>升级过程中界面需要调用 Perl 的模块 <code>Tk</code> ；</li></ul><p>CentOS:</p><pre><code>$ sudo yum install perl-Digest-MD5 perl-Tk</code></pre><p>Ubuntu:</p><pre><code>$ sudo apt-get install libdigest-perl-md5-perl perl-tk</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载地址：</p><ul><li>官方镜像: <a href="http://mirrors.ctan.org/systems/texlive/Images/texlive2017.iso" target="_blank" rel="noopener">texlive2017.iso</a></li><li>USTC 镜像: <a href="http://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/texlive2017.iso" target="_blank" rel="noopener">texlive2017.iso</a></li></ul><p>Linux 下可以用 wget、axel，windows 下可以用迅雷，怎么快怎么来。</p><h3 id="挂载-ISO-镜像"><a href="#挂载-ISO-镜像" class="headerlink" title="挂载 ISO 镜像"></a>挂载 ISO 镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ su</span><br><span class="line"><span class="comment"># mount -o loop texlive2017.iso  /mnt/</span></span><br><span class="line"><span class="comment"># cd /mnt</span></span><br><span class="line"><span class="comment"># ./install-tl</span></span><br></pre></td></tr></table></figure><p>出现选项后，输入 <code>I</code> 直接安装（也可以更改选项）。不出意外的话，5 分钟应该就 OK 了，<br>然后退出 root 用户。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>在当前用户的 <code>~/.bashrc</code> 中加入如下语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TeX Live 2017</span></span><br><span class="line"><span class="built_in">export</span> MANPATH=<span class="variable">$&#123;MANPATH&#125;</span>:/usr/<span class="built_in">local</span>/texlive/2017/texmf-dist/doc/man</span><br><span class="line"><span class="built_in">export</span> INFOPATH=<span class="variable">$&#123;INFOPATH&#125;</span>:/usr/<span class="built_in">local</span>/texlive/2017/texmf-dist/doc/info</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/<span class="built_in">local</span>/texlive/2017/bin/x86_64-linux</span><br></pre></td></tr></table></figure><h3 id="卸载-ISO-镜像"><a href="#卸载-ISO-镜像" class="headerlink" title="卸载 ISO 镜像"></a>卸载 ISO 镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ sudo umount /mnt/</span><br></pre></td></tr></table></figure><h2 id="更新-TeXLive"><a href="#更新-TeXLive" class="headerlink" title="更新 TeXLive"></a>更新 TeXLive</h2><p>可以使用如下命令更新 TeXLive 宏包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ su</span><br><span class="line"><span class="comment"># 更新 TeXLive 包管理器 tlmgr</span></span><br><span class="line"><span class="comment"># tlmgr update --self</span></span><br><span class="line"><span class="comment"># 更新 TeXLive 的全部包</span></span><br><span class="line"><span class="comment"># tlmgr update --all</span></span><br></pre></td></tr></table></figure><p>默认情况下，会自动搜索合适的镜像来更新，也可以使用 <code>--repository</code> 选项指定了要使用<br>哪一个 CTAN 镜像。</p><p>比如 USTC 镜像:</p><pre><code># tlmgr update --self --repository http://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/# tlmgr update --all --repository http://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/</code></pre><p>比如阿里云镜像:</p><pre><code># tlmgr update --self --repository http://mirrors.aliyun.com/CTAN/systems/texlive/tlnet/# tlmgr update --all --repository http://mirrors.aliyun.com/CTAN/systems/texlive/tlnet/</code></pre><p>如果希望在图形界面下升级，可以使用如下命令调出 tlmgr 的中文图形界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ su</span><br><span class="line"><span class="comment"># tlmgr --gui --gui-lang zh_CN</span></span><br></pre></td></tr></table></figure><h2 id="安装额外的字体"><a href="#安装额外的字体" class="headerlink" title="安装额外的字体"></a>安装额外的字体</h2><p>TeXLive 2017 在使用 xeLaTeX 处理中文时，有自己的默认字体。大多数 Linux 发行版下，<br>都使用自带的 Fandol 字体。</p><p>如果想要使用 Windows 字体，可以将字体文件复制到 <code>~/.fonts</code> 目录下，并在 tex 源码中<br>指定字体选项即可。</p><h2 id="修订历史"><a href="#修订历史" class="headerlink" title="修订历史"></a>修订历史</h2><ul><li>2013-07-11：初稿；</li><li>2014-07-06：修改为 TeXLive2014，并删除中文字体部分；</li><li>2015-03-08：新增 “安装依赖”；</li><li>2015-03-15：使用命令行更新包；</li><li>2015-03-20：指定更新源以及 GUI 更新；</li><li>2015-06-13：更新至 TeXLive 2015；</li><li>2016-06-07：更新至 TeXLive 2016；</li><li>2017-06-14：更新至 TeXLive 2017；</li></ul>]]></content>
      
      <categories>
          
          <category> 文本编辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
